import pytest
import asyncio
import uuid
from p2p_network import Node, KeyPair, PeerId

class TestSimpleNode:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ P2P —Å–µ—Ç–∏"""
    
    def __init__(self, kad_server=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
        
        :param kad_server: –§–ª–∞–≥, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª Kademlia —Å–µ—Ä–≤–µ—Ä–æ–º
        """
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤—É—é –ø–∞—Ä—É –∏ —É–∑–µ–ª
        self.key_pair = KeyPair()
        self.node = Node(self.key_pair, False, kad_server)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        self.connections = []
        self.received_messages = []
        self.auth_completed = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._event_task = None
    
    async def start(self, port):
        """
        –ó–∞–ø—É—Å–∫ —É–∑–ª–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
        
        :param port: –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        :return: –ê–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω —É–∑–µ–ª
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª
        await self.node.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
        self._event_task = asyncio.create_task(self._process_events())
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
        address = await self.node.listen_port(port, "127.0.0.1")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º bootstrap –¥–ª—è Kademlia
        await self.node.bootstrap_kad()
        
        return address
    
    async def _process_events(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç —É–∑–ª–∞"""
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                event = await self.node.get_next_event(timeout_ms=100)
                if event is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    await asyncio.sleep(0.1)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                event_type = event.get('type')
                
                if event_type == 'PeerConnected':
                    peer_id = event.get('peer_id')
                    self.connections.append((peer_id, True))
                    print(f"‚ö° –£–∑–µ–ª {self.node.peer_id()} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {peer_id}")
                
                elif event_type == 'PeerDisconnected':
                    peer_id = event.get('peer_id')
                    self.connections.append((peer_id, False))
                    print(f"‚ö° –£–∑–µ–ª {self.node.peer_id()} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç {peer_id}")
                
                elif event_type == 'IncomingStream':
                    stream = event.get('stream')
                    if stream:
                        asyncio.create_task(self._handle_stream(stream))
                
                elif event_type == 'AuthEvent':
                    auth_event = event.get('auth_event', {})
                    auth_type = auth_event.get('type')
                    
                    if auth_type == 'VerifyPorRequest':
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        connection_id = auth_event.get('connection_id')
                        peer_id = auth_event.get('peer_id')
                        
                        await self.node.submit_por_verification(connection_id, True, {})
                        print(f"üîê –£–∑–µ–ª {self.node.peer_id()} –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç {peer_id}")
                    
                    elif auth_type == 'MutualAuthSuccess':
                        peer_id = auth_event.get('peer_id')
                        self.auth_completed.append(peer_id)
                        print(f"üîí –£–∑–µ–ª {self.node.peer_id()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –≤–∑–∞–∏–º–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å {peer_id}")
        
        except asyncio.CancelledError:
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            pass
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _handle_stream(self, stream):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        
        :param stream: –û–±—ä–µ–∫—Ç –ø–æ—Ç–æ–∫–∞
        """
        try:
            peer_id = stream.peer_id
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
            message = await stream.read_to_end()
            
            if message:
                decoded_message = message.decode()
                print(f"üì© –£–∑–µ–ª {self.node.peer_id()} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {peer_id}: {decoded_message}")
                self.received_messages.append((peer_id, decoded_message))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = f"ACK: {decoded_message}"
                await stream.write(response.encode())
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await stream.close()
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
    
    async def connect_and_wait_auth(self, address, timeout=10):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∑–ª—É —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        :param address: –ê–¥—Ä–µ—Å —É–∑–ª–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∑–ª—É
        connected = await self.node.connect(address)
        
        if not connected:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {address}")
            return False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        start_time = asyncio.get_event_loop().time()
        while asyncio.get_event_loop().time() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ —Å–ø–∏—Å–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            for peer_id in self.auth_completed:
                return True
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(0.1)
        
        return False
    
    async def send_message(self, peer_id, message):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
        
        :param peer_id: ID —É–∑–ª–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :return: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫ —É–∑–ª—É
            stream = await self.node.open_stream(peer_id)
            print(f"üì§ –£–∑–µ–ª {self.node.peer_id()} –æ—Ç–∫—Ä—ã–ª –ø–æ—Ç–æ–∫ –∫ {peer_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{message}'")
            await stream.write(message.encode())
            await stream.write(message.encode())
            
            print("WRITE EOF!!!!!!!!!!!!!!!!")
            await stream.close()
            await asyncio.sleep(2)
            print("11 after sleep")
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞
            response_data = await stream.read_to_end()
            
            if response_data:
                response = response_data.decode()
                print(f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                return response
            
            return None
        
        except Exception as e:
            print(f"‚ùå  SEND MESSAGE –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
            return None
    
    def get_peer_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —É–∑–ª–∞"""
        return self.node.peer_id()
    
    def get_received_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.received_messages
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∑–ª–∞"""
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if self._event_task:
            self._event_task.cancel()
            try:
                await self._event_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–µ–ª
        await self.node.stop()
        print(f"üõë –£–∑–µ–ª {self.node.peer_id()} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@pytest.mark.asyncio
async def test_simple_message():
    """
    –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏:
    1. –£–∑–µ–ª 1 (—Å–µ—Ä–≤–µ—Ä) –∏ –£–∑–µ–ª 2 (–∫–ª–∏–µ–Ω—Ç) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    2. –£–∑–µ–ª 2 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –£–∑–ª—É 1
    3. –£–∑–µ–ª 1 –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    4. –£–∑–µ–ª 2 –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    """
    # –°–æ–∑–¥–∞—ë–º –¥–≤–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–∑–ª–∞
    server_node = TestSimpleNode(kad_server=True)
    client_node = TestSimpleNode()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–ª—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
        server_address = await server_node.start(port=9000)
        await client_node.start(port=9001)
        
        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {server_address}")
        print(f"üöÄ ID —Å–µ—Ä–≤–µ—Ä–∞: {server_node.get_peer_id()}")
        print(f"üöÄ ID –∫–ª–∏–µ–Ω—Ç–∞: {client_node.get_peer_id()}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫ —Å–µ—Ä–≤–µ—Ä—É
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        connected = await client_node.connect_and_wait_auth(server_address)
        assert connected, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        unique_id = str(uuid.uuid4())
        test_message = f"Test message #{unique_id}"
        
        # –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É
        print(f"üì§ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        response = await client_node.send_message(
            server_node.get_peer_id(), test_message
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
        assert response is not None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        assert test_message in response, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert "ACK" in response, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω")
        print(f"üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–ª—ã
        await server_node.stop()
        await client_node.stop()
        print("üõë –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —É–∑–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
    asyncio.run(test_simple_message())