use std::str::FromStr;
use libp2p::{Multiaddr, PeerId, multiaddr::Protocol};
use crate::network::commander::Commander;
use std::time::Duration;

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–ø–æ—Ä–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
pub struct BootstrapConnect;




impl BootstrapConnect {
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PeerId –∏–∑ multiaddr
    pub fn extract_peer_id_from_multiaddr(addr_str: &str) -> Result<(PeerId, Multiaddr), Box<dyn std::error::Error + Send + Sync>> {
        let addr = Multiaddr::from_str(addr_str)
            .map_err(|e| format!("Invalid multiaddress '{}': {}", addr_str, e))?;
        
        // –ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç p2p (–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç PeerId)
        let components = addr.iter().collect::<Vec<_>>();
        let mut peer_id = None;
        let mut base_addr = addr.clone();
        
        // –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç p2p –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–≥–æ PeerId
        for (i, component) in components.iter().enumerate() {
            if let Protocol::P2p(hash) = component {
                // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ multihash –≤ PeerId
                let pid = PeerId::try_from(hash.clone())
                    .map_err(|_| format!("Invalid peer ID in multiaddress"))?;
                peer_id = Some(pid);
                
                // –ï—Å–ª–∏ PeerId –≤ –∫–æ–Ω—Ü–µ –∞–¥—Ä–µ—Å–∞, –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –µ–≥–æ
                if i == components.len() - 1 {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    base_addr = components[..i].iter()
                        .fold(Multiaddr::empty(), |mut addr, proto| {
                            addr.push(proto.clone());
                            addr
                        });
                }
                
                break;
            }
        }
        
        match peer_id {
            Some(pid) => Ok((pid, base_addr)),
            None => Err("No PeerId (p2p component) found in multiaddress".into())
        }
    }

    pub async fn connect_to_bootstrap_server(
        commander: &Commander, 
        bootstrap_addr: &str,
        local_peer_id: PeerId,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        
        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º PeerId –∏ –∞–¥—Ä–µ—Å –∏–∑ —Å—Ç—Ä–æ–∫–∏
        let (peer_id, addr) = Self::extract_peer_id_from_multiaddr(bootstrap_addr)?;
        
        println!("üîå Attempting to connect to bootstrap server {} at {}", peer_id, addr);
        
        // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        commander.connect(addr.clone()).await?;
        println!("‚úÖ Connected to bootstrap server at {}", addr);
        
        // 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
        println!("üîç Fetching routing information from bootstrap server...");
        if let Err(e) = commander.find_peer_addresses(local_peer_id).await {
            eprintln!("‚ö†Ô∏è Failed to fetch routing information: {}", e);
        }
        
        // 4. –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –∫–∞–∫ –æ–ø–æ—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        let mut full_addr = addr.clone();
        full_addr.push(Protocol::P2p(peer_id.into()));
        
        if let Err(e) = commander.add_bootstrap_node(peer_id, vec![full_addr]).await {
            eprintln!("‚ö†Ô∏è Failed to add bootstrap node: {}", e);
        } else {
            println!("üìå Node {} added as bootstrap server", peer_id);
        }
        
        // 5. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        // 6. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        match commander.get_bootstrap_nodes().await {
            Ok(nodes) => {
                if !nodes.is_empty() {
                    println!("üìã Known bootstrap nodes: {}", nodes.len());
                    for (id, addrs) in nodes {
                        println!(" - {}: {}", id, addrs.len());
                    }
                }
            }
            Err(e) => {
                eprintln!("‚ö†Ô∏è Failed to get bootstrap nodes: {}", e);
            }
        }
        
        Ok(())
    }


    pub async fn connect_to_bootstrap_server_with_retry(
    commander: &Commander, 
    bootstrap_addr: &str,
    local_peer_id: PeerId,
    max_retries: usize,
    retry_delay: Duration,
) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let mut last_error = None;
    
    for attempt in 0..max_retries {
        match Self::connect_to_bootstrap_server(commander, bootstrap_addr, local_peer_id).await {
            Ok(()) => return Ok(()),
            Err(e) => {
                eprintln!("Attempt {}/{} to connect to bootstrap server failed: {}", 
                         attempt + 1, max_retries, e);
                last_error = Some(e);
                
                if attempt < max_retries - 1 {
                    tokio::time::sleep(retry_delay).await;
                }
            }
        }
    }
    
    Err(last_error.unwrap_or_else(|| "Failed to connect to bootstrap server".into()))
}
}