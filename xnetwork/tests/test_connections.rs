// tests/test_connections.rs - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Connection Management

use std::time::Duration;
use libp2p::{PeerId, Multiaddr};
use xnetwork::{
    XRoutesConfig, 
    events::NetworkEvent,
    connection_management::ConnectionDirection,
};

mod common;
use common::*;

// ==========================================
// 1. –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
// ==========================================

#[tokio::test]
async fn test_basic_connection_establishment() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing basic peer-to-peer connection establishment");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —É–∑–ª–∞
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("Failed to create server node");
        
        let (mut client_node, client_commander, mut client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("Failed to create client node");
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await
            .expect("Failed to start server listener");
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        let server_addr = tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No listening address received");
        }).await.expect("Timeout waiting for server address");
        
        println!("Server listening on: {}", server_addr);
        
        // –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
        let connect_start = std::time::Instant::now();
        let _ = client_commander.connect(server_addr.clone()).await; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)
        let connection_established = tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = client_events.recv().await {
                if let NetworkEvent::PeerConnected { peer_id } = event {
                    if peer_id == server_peer_id {
                        return true;
                    }
                }
            }
            false
        }).await.unwrap_or(false);
        
        let connect_duration = connect_start.elapsed();
        println!("Connection attempt took: {:?}, established: {}", connect_duration, connection_established);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let client_connections = client_commander.get_all_connections().await
            .expect("Should get connections");
        
        if connection_established && !client_connections.is_empty() {
            let connection = &client_connections[0];
            assert_eq!(connection.peer_id, server_peer_id, "Connection should be to server peer");
            assert_eq!(connection.direction, ConnectionDirection::Outbound, "Should be outbound connection");
            assert!(connection.is_active(), "Connection should be active");
            println!("‚úÖ Connection verified successfully");
        } else {
            println!("‚ö†Ô∏è  Connection not established (test environment limitation)");
        }
        
        // Cleanup
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Basic connection establishment test completed"),
        Err(_) => panic!("‚è∞ Basic connection establishment test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_connection_with_timeout_success() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing successful connection with timeout");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        let (mut server_node, server_commander, mut server_events, _server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("Failed to create server");
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let server_addr = tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No address");
        }).await.unwrap();
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        let (mut client_node, client_commander, _client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å 2-—Å–µ–∫—É–Ω–¥–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        let start_time = std::time::Instant::now();
        let connection_result = client_commander.connect_with_timeout(server_addr, 2).await;
        let elapsed = start_time.elapsed();
        
        match connection_result {
            Ok(_) => {
                println!("‚úÖ Connection succeeded in {:?}", elapsed);
                assert!(elapsed.as_secs() < 2, "Connection should complete before timeout");
            }
            Err(e) => {
                // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                println!("‚ö†Ô∏è  Connection failed: {}", e);
                assert!(!e.to_string().contains("timed out"), "Should not timeout with valid address");
            }
        }
        
        // Cleanup
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Connection with timeout success test completed"),
        Err(_) => panic!("‚è∞ Connection with timeout test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_multiple_connections_same_peer() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing multiple connections to the same peer");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º server –∏ –¥–≤–∞ client'–∞
        let (mut server_node, server_commander, mut server_events, _server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client1_node, client1_commander, _client1_events, _) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client2_node, client2_commander, _client2_events, _) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        let client1_handle = tokio::spawn(async move {
            client1_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        let client2_handle = tokio::spawn(async move {
            client2_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let server_addr = tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No address");
        }).await.unwrap();
        
        // –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è
        let connect1 = client1_commander.connect_with_timeout(server_addr.clone(), 1);
        let connect2 = client2_commander.connect_with_timeout(server_addr.clone(), 1);
        
        let (result1, result2) = tokio::join!(connect1, connect2);
        
        println!("Client1 connect result: {:?}", result1);
        println!("Client2 connect result: {:?}", result2);
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        let server_connections = server_commander.get_all_connections().await.unwrap_or_default();
        println!("Server has {} connections", server_connections.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let network_state = server_commander.get_network_state().await.unwrap();
        println!("Network state: {} total connections, {} authenticated peers", 
                 network_state.total_connections, network_state.authenticated_peers);
        
        // Cleanup
        client1_handle.abort();
        client2_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Multiple connections test completed"),
        Err(_) => panic!("‚è∞ Multiple connections test timed out (5s)"),
    }
}

// ==========================================
// 2. –¢–ï–°–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò
// ==========================================

#[tokio::test]
async fn test_disconnect_peer() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing peer disconnection");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        let mut client_events = tokio::sync::mpsc::channel(100).1; // Placeholder
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let connections_before = client_commander.get_all_connections().await.unwrap();
        println!("Connections before disconnect: {}", connections_before.len());
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç peer'–∞
        let disconnect_result = client_commander.disconnect(server_peer_id).await;
        println!("Disconnect result: {:?}", disconnect_result);
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (—Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º)
        let disconnected = tokio::time::timeout(Duration::from_secs(1), async {
            while let Some(event) = client_events.recv().await {
                if let NetworkEvent::PeerDisconnected { peer_id } = event {
                    return peer_id == server_peer_id;
                }
            }
            false
        }).await.unwrap_or(false);
        
        if disconnected {
            println!("‚úÖ Received disconnect event");
        } else {
            println!("‚ö†Ô∏è  Disconnect event not received (test environment limitation)");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ
        tokio::time::sleep(Duration::from_millis(200)).await;
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let active_connections = connections_after.iter().filter(|c| c.is_active()).count();
        
        println!("Active connections after disconnect: {}", active_connections);
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Peer disconnection test completed"),
        Err(_) => panic!("‚è∞ Peer disconnection test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_disconnect_specific_connection() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing specific connection disconnection");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             _server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let connections = client_commander.get_all_connections().await.unwrap();
        
        if !connections.is_empty() {
            let connection_id = connections[0].connection_id;
            println!("Disconnecting connection: {:?}", connection_id);
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            let disconnect_result = client_commander.disconnect_connection(connection_id).await;
            println!("Disconnect connection result: {:?}", disconnect_result);
            
            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tokio::time::sleep(Duration::from_millis(500)).await;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            let updated_connections = client_commander.get_all_connections().await.unwrap();
            let still_active = updated_connections.iter()
                .any(|c| c.connection_id == connection_id && c.is_active());
            
            println!("Connection still active: {}", still_active);
        } else {
            println!("‚ö†Ô∏è  No connections available for testing");
        }
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Specific connection disconnection test completed"),
        Err(_) => panic!("‚è∞ Specific connection disconnection test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_disconnect_all_connections() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing disconnect all connections");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             _server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let connections_before = client_commander.get_all_connections().await.unwrap();
        let active_before = connections_before.iter().filter(|c| c.is_active()).count();
        println!("Active connections before disconnect all: {}", active_before);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let disconnect_all_result = client_commander.disconnect_all().await;
        println!("Disconnect all result: {:?}", disconnect_all_result);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let active_after = connections_after.iter().filter(|c| c.is_active()).count();
        println!("Active connections after disconnect all: {}", active_after);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let network_state = client_commander.get_network_state().await.unwrap();
        println!("Network state after disconnect all: {} connections", network_state.total_connections);
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Disconnect all connections test completed"),
        Err(_) => panic!("‚è∞ Disconnect all connections test timed out (5s)"),
    }
}


// ==========================================
// 3. –¢–ï–°–¢–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–û–ï–î–ò–ù–ï–ù–ò–Ø–•
// ==========================================

#[tokio::test]
async fn test_get_all_connections_empty() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing get_all_connections when no connections exist");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, _peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —É–∑–ª–∞
        let connections = commander.get_all_connections().await.unwrap();
        
        assert!(connections.is_empty(), "Should have no connections initially");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let network_state = commander.get_network_state().await.unwrap();
        assert_eq!(network_state.total_connections, 0, "Network state should show 0 connections");
        assert_eq!(network_state.authenticated_peers, 0, "Should have 0 authenticated peers");
        
        println!("‚úÖ Network state verified: {} connections, {} authenticated peers", 
                 network_state.total_connections, network_state.authenticated_peers);
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Get all connections empty test completed"),
        Err(_) => panic!("‚è∞ Get all connections empty test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_get_connection_info() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing get_connection_info for existing connections");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let connections = client_commander.get_all_connections().await.unwrap();
        
        if !connections.is_empty() {
            let connection_id = connections[0].connection_id;
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            let connection_info = client_commander.get_connection_info(connection_id).await.unwrap();
            
            match connection_info {
                Some(info) => {
                    println!("‚úÖ Connection info retrieved:");
                    println!("  ID: {:?}", info.connection_id);
                    println!("  Peer: {}", info.peer_id);
                    println!("  Direction: {:?}", info.direction);
                    println!("  State: {:?}", info.connection_state);
                    println!("  Duration: {:?}", info.duration());
                    
                    assert_eq!(info.peer_id, server_peer_id, "Peer ID should match");
                    assert!(info.is_active(), "Connection should be active");
                }
                None => {
                    println!("‚ö†Ô∏è  No connection info found (connection may have been closed)");
                }
            }
        } else {
            println!("‚ö†Ô∏è  No connections available for testing");
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å fake ConnectionId –∏–∑-–∑–∞ API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        println!("‚ö†Ô∏è  Skipping fake connection ID test");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Get connection info test completed"),
        Err(_) => panic!("‚è∞ Get connection info test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_get_peer_info() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing get_peer_info for connected and non-connected peers");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º peer'–µ
        let peer_info = client_commander.get_peer_info(server_peer_id).await.unwrap();
        
        match peer_info {
            Some(info) => {
                println!("‚úÖ Peer info retrieved:");
                println!("  Peer ID: {}", info.peer_id);
                println!("  Connections: {}", info.connection_count());
                println!("  Is connected: {}", info.is_connected());
                println!("  Is authenticated: {}", info.is_authenticated);
                println!("  Total connections ever: {}", info.total_connections);
                
                assert_eq!(info.peer_id, server_peer_id, "Peer ID should match");
            }
            None => {
                println!("‚ö†Ô∏è  Peer info not found (peer may not be connected)");
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º peer'–µ
        let fake_peer_id = PeerId::random();
        let nonexistent_peer_info = client_commander.get_peer_info(fake_peer_id).await.unwrap();
        
        assert!(nonexistent_peer_info.is_none(), "Should return None for non-existent peer");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Get peer info test completed"),
        Err(_) => panic!("‚è∞ Get peer info test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_network_state_tracking() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing network state tracking and updates");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, _peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
        let initial_state = commander.get_network_state().await.unwrap();
        println!("Initial network state:");
        println!("  Local peer: {}", initial_state.local_peer_id);
        println!("  Listening addresses: {}", initial_state.listening_addresses.len());
        println!("  Total connections: {}", initial_state.total_connections);
        println!("  Authenticated peers: {}", initial_state.authenticated_peers);
        println!("  Uptime: {:?}", initial_state.uptime);
        
        assert_eq!(initial_state.total_connections, 0, "Should start with 0 connections");
        assert_eq!(initial_state.authenticated_peers, 0, "Should start with 0 authenticated peers");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        let updated_state = commander.get_network_state().await.unwrap();
        println!("Updated network state:");
        println!("  Listening addresses: {}", updated_state.listening_addresses.len());
        println!("  Uptime: {:?}", updated_state.uptime);
        
        assert!(updated_state.listening_addresses.len() > 0, "Should have listening addresses after setup");
        assert!(updated_state.uptime >= initial_state.uptime, "Uptime should not decrease");
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Network state tracking test completed"),
        Err(_) => panic!("‚è∞ Network state tracking test timed out (5s)"),
    }
}

// ==========================================
// 4. –¢–ï–°–¢–´ –°–û–ë–´–¢–ò–ô –°–û–ï–î–ò–ù–ï–ù–ò–ô
// ==========================================

#[tokio::test]
async fn test_connection_events_lifecycle() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing complete connection event lifecycle");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client_node, client_commander, mut client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let mut listening_event_received = false;
        let mut server_addr = None;
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = server_events.recv().await {
                match event {
                    NetworkEvent::ListeningOnAddress { addr, full_addr } => {
                        println!("‚úÖ Listening event: {} -> {:?}", addr, full_addr);
                        listening_event_received = true;
                        if let Some(full) = full_addr {
                            server_addr = Some(full);
                            break;
                        }
                    }
                    _ => continue,
                }
            }
        }).await.ok();
        
        if !listening_event_received || server_addr.is_none() {
            println!("‚ö†Ô∏è  Listening event not received - skipping connection test");
        } else {
            let addr = server_addr.unwrap();
            
            // –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
            let _ = client_commander.connect_with_timeout(addr, 1).await; // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
            
            let mut connection_opened_received = false;
            let mut peer_connected_received = false;
            
            // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            tokio::time::timeout(Duration::from_secs(2), async {
                while let Some(event) = client_events.recv().await {
                    match event {
                        NetworkEvent::ConnectionOpened { peer_id, addr, connection_id, protocols } => {
                            println!("‚úÖ Connection opened event: peer={}, addr={}, id={:?}, protocols={:?}", 
                                     peer_id, addr, connection_id, protocols);
                            connection_opened_received = true;
                            if peer_id == server_peer_id {
                                break;
                            }
                        }
                        NetworkEvent::PeerConnected { peer_id } => {
                            println!("‚úÖ Peer connected event: {}", peer_id);
                            peer_connected_received = true;
                            if peer_id == server_peer_id {
                                break;
                            }
                        }
                        NetworkEvent::ConnectionError { peer_id, error } => {
                            println!("‚ö†Ô∏è  Connection error: peer={:?}, error={}", peer_id, error);
                        }
                        _ => continue,
                    }
                }
            }).await.ok();
            
            if connection_opened_received || peer_connected_received {
                println!("‚úÖ Connection events received successfully");
            } else {
                println!("‚ö†Ô∏è  Connection events not received (test environment limitation)");
            }
        }
        
        // Cleanup
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Connection events lifecycle test completed"),
        Err(_) => panic!("‚è∞ Connection events lifecycle test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_listening_address_events() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing listening address events");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, mut events, _peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let mut listening_events = Vec::new();
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = events.recv().await {
                match event {
                    NetworkEvent::ListeningOnAddress { addr, full_addr } => {
                        println!("üì° Listening on: {} (full: {:?})", addr, full_addr);
                        listening_events.push((addr, full_addr));
                        break; // –ü–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    }
                    NetworkEvent::StopListeningOnAddress { addr } => {
                        println!("üì° Stopped listening on: {}", addr);
                    }
                    _ => continue,
                }
            }
        }).await.ok();
        
        assert!(!listening_events.is_empty(), "Should receive at least one listening event");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API
        let listen_addresses = commander.get_listen_addresses().await.unwrap();
        println!("API reported {} listening addresses", listen_addresses.len());
        
        for addr in &listen_addresses {
            println!("  - {}", addr);
        }
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Listening address events test completed"),
        Err(_) => panic!("‚è∞ Listening address events test timed out (5s)"),
    }
}

// ==========================================
// 5. –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò
// ==========================================

#[tokio::test]
async fn test_rapid_connect_disconnect() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing rapid connect/disconnect cycles");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client_node, client_commander, _client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let server_addr = tokio::time::timeout(Duration::from_secs(2), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No address");
        }).await.unwrap();
        
        let mut successful_cycles = 0;
        let total_cycles = 3; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É–∫–ª–∞–¥–∫–∏ –≤ 5 —Å–µ–∫—É–Ω–¥
        
        for i in 0..total_cycles {
            println!("  Cycle {}/{}", i + 1, total_cycles);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)
            let connect_result = client_commander.connect_with_timeout(server_addr.clone(), 1).await;
            
            if connect_result.is_ok() {
                // –î–∞–µ–º –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
                tokio::time::sleep(Duration::from_millis(50)).await;
                
                // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
                let disconnect_result = client_commander.disconnect(server_peer_id).await;
                
                if disconnect_result.is_ok() {
                    successful_cycles += 1;
                }
                
                // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                tokio::time::sleep(Duration::from_millis(100)).await;
            } else {
                println!("    Connect failed: {:?}", connect_result);
            }
        }
        
        println!("‚úÖ Completed {}/{} rapid connect/disconnect cycles", successful_cycles, total_cycles);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let final_connections = client_commander.get_all_connections().await.unwrap();
        let active_connections = final_connections.iter().filter(|c| c.is_active()).count();
        
        println!("Final active connections: {}", active_connections);
        
        // Cleanup
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Rapid connect/disconnect test completed"),
        Err(_) => panic!("‚è∞ Rapid connect/disconnect test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_memory_cleanup_after_disconnect() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing memory cleanup after disconnection");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let initial_connections = client_commander.get_all_connections().await.unwrap();
        let initial_peers = client_commander.get_connected_peers().await.unwrap();
        let initial_network_state = client_commander.get_network_state().await.unwrap();
        
        println!("Initial state:");
        println!("  Connections: {}", initial_connections.len());
        println!("  Peers: {}", initial_peers.len());
        println!("  Network connections: {}", initial_network_state.total_connections);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        let _ = client_commander.disconnect(server_peer_id).await;
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç)
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        let final_connections = client_commander.get_all_connections().await.unwrap();
        let final_peers = client_commander.get_connected_peers().await.unwrap();
        let final_network_state = client_commander.get_network_state().await.unwrap();
        
        println!("Final state:");
        println!("  Connections: {}", final_connections.len());
        println!("  Peers: {}", final_peers.len());
        println!("  Network connections: {}", final_network_state.total_connections);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞
        let active_connections = final_connections.iter().filter(|c| c.is_active()).count();
        let connected_peers = final_peers.iter().filter(|p| p.is_connected()).count();
        
        println!("Active connections after cleanup: {}", active_connections);
        println!("Connected peers after cleanup: {}", connected_peers);
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Memory cleanup test completed"),
        Err(_) => panic!("‚è∞ Memory cleanup test timed out (5s)"),
    }
}

// ==========================================
// 6. EDGE CASE –¢–ï–°–¢–´
// ==========================================

#[tokio::test]
async fn test_disconnect_nonexistent_peer() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing disconnection of non-existent peer");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, _peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π peer
        let fake_peer_id = PeerId::random();
        let disconnect_result = commander.disconnect(fake_peer_id).await;
        
        match disconnect_result {
            Ok(_) => {
                println!("‚ö†Ô∏è  Disconnect succeeded unexpectedly");
            }
            Err(e) => {
                println!("‚úÖ Disconnect failed as expected: {}", e);
                assert!(e.to_string().contains("Not connected"), "Should indicate peer not connected");
            }
        }
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Disconnect non-existent peer test completed"),
        Err(_) => panic!("‚è∞ Disconnect non-existent peer test timed out (5s)"),
    }
}

#[tokio::test]
async fn test_connection_state_consistency() {
    let test_timeout = Duration::from_secs(5);
    
    println!("üß™ Testing connection state consistency across APIs");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             _server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ API
        let all_connections = client_commander.get_all_connections().await.unwrap();
        let connected_peers = client_commander.get_connected_peers().await.unwrap();
        let network_state = client_commander.get_network_state().await.unwrap();
        let legacy_peers = client_commander.get_connected_peers_simple().await.unwrap();
        
        println!("State consistency check:");
        println!("  All connections: {}", all_connections.len());
        println!("  Connected peers (new API): {}", connected_peers.len());
        println!("  Network state connections: {}", network_state.total_connections);
        println!("  Legacy connected peers: {}", legacy_peers.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        let active_connections = all_connections.iter().filter(|c| c.is_active()).count();
        let actually_connected_peers = connected_peers.iter().filter(|p| p.is_connected()).count();
        
        println!("  Active connections: {}", active_connections);
        println!("  Actually connected peers: {}", actually_connected_peers);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if !all_connections.is_empty() {
            let connection = &all_connections[0];
            println!("Connection details:");
            println!("  ID: {:?}", connection.connection_id);
            println!("  Peer: {}", connection.peer_id);
            println!("  Direction: {:?}", connection.direction);
            println!("  State: {:?}", connection.connection_state);
            println!("  Auth status: {:?}", connection.auth_status);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ peer'–µ
            if let Ok(Some(peer_info)) = client_commander.get_peer_info(connection.peer_id).await {
                println!("Peer info:");
                println!("  Connection count: {}", peer_info.connection_count());
                println!("  Is connected: {}", peer_info.is_connected());
                println!("  Auth status: {:?}", peer_info.auth_status);
            }
        } else {
            println!("‚ö†Ô∏è  No connections available for detailed testing");
        }
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Connection state consistency test completed"),
        Err(_) => panic!("‚è∞ Connection state consistency test timed out (5s)"),
    }
}