// tests/test_diagnostic.rs

use std::time::Duration;
use xnetwork::XRoutesConfig;

mod common;
use common::*;

#[tokio::test]
async fn test_node_lifecycle() {
    println!("üß™ Testing node lifecycle...");
    
    // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
    let (mut node, _commander, _events, peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await
        .expect("Failed to create test node");
    
    println!("‚úÖ Node created: {}", peer_id);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
    let handle = tokio::spawn(async move {
        println!("üöÄ Node starting...");
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –æ—á–∏—Å—Ç–∫—É
        tokio::select! {
            _ = node.run_with_cleanup_interval(Duration::from_millis(100)) => {
                println!("üì¥ Node run completed");
            }
            _ = tokio::time::sleep(Duration::from_secs(2)) => {
                println!("‚è∞ Node run timed out (expected)");
            }
        }
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    tokio::time::sleep(Duration::from_millis(500)).await;
    println!("‚èπÔ∏è Aborting node...");
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    handle.abort();
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    tokio::time::sleep(Duration::from_millis(100)).await;
    
    println!("‚úÖ Node lifecycle test completed");
}

#[tokio::test] 
async fn test_bootstrap_creation_only() {
    println!("üß™ Testing bootstrap server creation only...");
    
    // –°–æ–∑–¥–∞–µ–º bootstrap —Å–µ—Ä–≤–µ—Ä
    let (handle, addr, peer_id) = create_bootstrap_server().await
        .expect("Failed to create bootstrap server");
    
    println!("‚úÖ Bootstrap created: {} at {}", peer_id, addr);
    
    // –°—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    tokio::time::sleep(Duration::from_millis(100)).await;
    handle.abort();
    
    tokio::time::sleep(Duration::from_millis(200)).await;
    println!("‚úÖ Bootstrap creation test completed");
}