//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NetCom –Ω–æ–¥

use libp2p::PeerId;
use tokio::sync::oneshot;
use xnetwork::{
    commander::Commander,
    events::NetworkEvent,
};

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∏—Ä—É
pub fn create_peer_connected_handler(expected_peer_id: PeerId) -> (oneshot::Receiver<()>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |event: &NetworkEvent| {
        if let NetworkEvent::PeerConnected { peer_id } = event {
            if peer_id == &expected_peer_id {
                println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∏—Ä—É {:?}", peer_id);
                if let Some(tx) = tx.take() {
                    let _ = tx.send(());
                }
            }
        }
    };
    
    (rx, handler)
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ä–∞
pub fn create_peer_disconnected_handler(expected_peer_id: PeerId) -> (oneshot::Receiver<()>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |event: &NetworkEvent| {
        if let NetworkEvent::PeerDisconnected { peer_id } = event {
            if peer_id == &expected_peer_id {
                println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ä–∞ {:?}", peer_id);
                if let Some(tx) = tx.take() {
                    let _ = tx.send(());
                }
            }
        }
    };
    
    (rx, handler)
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤–∑–∞–∏–º–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
pub fn create_mutual_auth_handler(expected_peer_id: PeerId) -> (oneshot::Receiver<()>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |event: &NetworkEvent| {
        if let NetworkEvent::AuthEvent { event: auth_event } = event {
            if let xauth::events::PorAuthEvent::MutualAuthSuccess { peer_id, .. } = auth_event {
                if peer_id == &expected_peer_id {
                    println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤–∑–∞–∏–º–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–∏—Ä–æ–º {:?}", peer_id);
                    if let Some(tx) = tx.take() {
                        let _ = tx.send(());
                    }
                }
            }
        }
    };
    
    (rx, handler)
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è POR –∑–∞–ø—Ä–æ—Å–æ–≤
pub fn create_por_approval_handler(commander: Commander) -> impl FnMut(&NetworkEvent) {
    move |event: &NetworkEvent| {
        if let NetworkEvent::AuthEvent { event: auth_event } = event {
            if let xauth::events::PorAuthEvent::VerifyPorRequest { peer_id, connection_id, .. } = auth_event {
                println!("‚úÖ –ü–æ–ª—É—á–µ–Ω POR –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–∏—Ä–∞ {:?}", peer_id);
                println!("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º POR –∑–∞–ø—Ä–æ—Å...");
                let commander_clone = commander.clone();
                let connection_id = *connection_id;
                tokio::spawn(async move {
                    let _ = commander_clone.submit_por_verification(
                        connection_id, 
                        xauth::definitions::AuthResult::Ok(std::collections::HashMap::new())
                    ).await;
                });
            }
        }
    }
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è POR –∑–∞–ø—Ä–æ—Å–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
pub fn create_handler_submit_por_verification(commander: Commander) -> impl FnMut(&NetworkEvent) {
    move |event: &NetworkEvent| {
        if let NetworkEvent::AuthEvent { event: auth_event } = event {
            if let xauth::events::PorAuthEvent::VerifyPorRequest { peer_id, connection_id, .. } = auth_event {
                println!("‚úÖ –ü–æ–ª—É—á–µ–Ω POR –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–∏—Ä–∞ {:?}", peer_id);
                println!("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º POR –∑–∞–ø—Ä–æ—Å...");
                let commander_clone = commander.clone();
                let connection_id = *connection_id;
                tokio::spawn(async move {
                    let _ = commander_clone.submit_por_verification(
                        connection_id, 
                        xauth::definitions::AuthResult::Ok(std::collections::HashMap::new())
                    ).await;
                });
            }
        }
    }
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
pub fn create_xstream_opened_handler(_expected_peer_id: PeerId) -> (oneshot::Receiver<()>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |_event: &NetworkEvent| {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ XStreamEvent –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ NetworkEvent
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    };
    
    (rx, handler)
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∏—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
pub fn create_peer_discovered_handler(_expected_peer_id: PeerId) -> (oneshot::Receiver<()>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |_event: &NetworkEvent| {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ DiscoveryEvent –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ NetworkEvent
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    };
    
    (rx, handler)
}

/// –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
pub fn create_listening_address_handler() -> (oneshot::Receiver<libp2p::Multiaddr>, impl FnMut(&NetworkEvent)) {
    let (tx, rx) = oneshot::channel();
    let mut tx = Some(tx);
    
    let handler = move |event: &NetworkEvent| {
        if let NetworkEvent::ListeningOnAddress { addr, .. } = event {
            println!("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–∞ –∞–¥—Ä–µ—Å–µ: {}", addr);
            if let Some(tx) = tx.take() {
                let _ = tx.send(addr.clone());
            }
        }
    };
    
    (rx, handler)
}
