// tests/test_connections_problematic.rs - –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã (–∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞)
//
// –≠—Ç–∏ —Ç–µ—Å—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º
// –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

use std::time::Duration;
use libp2p::PeerId;
use xnetwork::{
    XRoutesConfig, 
    events::NetworkEvent,
};

mod common;
use common::*;

// ==========================================
// –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´ - –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –° –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨–Æ
// ==========================================

/// –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
/// –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ API –≤—ã–∑–æ–≤–∞—Ö get_network_state() –∏–ª–∏ listen_port()
/// –ü–†–ò–ß–ò–ù–ê: –í–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º—å—é—Ç–µ–∫—Å–∞—Ö –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π
#[tokio::test]
async fn test_network_state_tracking() {
    let test_timeout = Duration::from_secs(15); // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
    
    println!("üß™ Testing network state tracking and updates");
    println!("‚ö†Ô∏è  WARNING: This test may hang in some environments");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_millis(500)).await;
        });
        
        // –î–∞–µ–º –≤—Ä–µ–º—è —É–∑–ª—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
        println!("Getting initial network state...");
        let initial_state = commander.get_network_state().await.unwrap();
        println!("Initial network state:");
        println!("  Local peer: {}", initial_state.local_peer_id);
        println!("  Listening addresses: {}", initial_state.listening_addresses.len());
        println!("  Total connections: {}", initial_state.total_connections);
        println!("  Authenticated peers: {}", initial_state.authenticated_peers);
        println!("  Uptime: {:?}", initial_state.uptime);
        
        assert_eq!(initial_state.local_peer_id, peer_id, "Local peer ID should match");
        assert_eq!(initial_state.total_connections, 0, "Should start with 0 connections");
        assert_eq!(initial_state.authenticated_peers, 0, "Should start with 0 authenticated peers");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å - –¢–£–¢ –ß–ê–°–¢–û –ó–ê–í–ò–°–ê–ï–¢
        println!("Starting listener...");
        let listen_result = commander.listen_port(Some("127.0.0.1".to_string()), 0).await;
        println!("Listen result: {:?}", listen_result);
        
        // –ñ–¥–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        println!("Waiting for listener to stabilize...");
        tokio::time::sleep(Duration::from_secs(2)).await;
        
        println!("Getting updated network state...");
        let updated_state = commander.get_network_state().await.unwrap();
        println!("Updated network state:");
        println!("  Listening addresses: {}", updated_state.listening_addresses.len());
        println!("  Uptime: {:?}", updated_state.uptime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
        println!("Getting listen addresses...");
        let listen_addresses = commander.get_listen_addresses().await.unwrap();
        println!("Listen addresses from API: {}", listen_addresses.len());
        for (i, addr) in listen_addresses.iter().enumerate() {
            println!("  Address {}: {}", i + 1, addr);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if listen_result.is_ok() {
            assert!(updated_state.listening_addresses.len() > 0, "Should have listening addresses after setup");
            assert!(updated_state.uptime >= initial_state.uptime, "Uptime should not decrease");
            println!("‚úÖ Network state tracking working correctly");
        } else {
            println!("‚ö†Ô∏è  Listen failed, but network state API still functional");
        }
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Network state tracking test completed"),
        Err(_) => panic!("‚è∞ Network state tracking test timed out ({}s)", test_timeout.as_secs()),
    }
}

/// –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –æ–¥–Ω–æ–º—É peer'—É
/// –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (PoR auth)
/// –ü–†–ò–ß–ò–ù–ê: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–≤–∏—Å–∞–µ—Ç
#[tokio::test]
async fn test_multiple_connections_same_peer() {
    let test_timeout = Duration::from_secs(20); // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
    
    println!("üß™ Testing multiple connections to the same peer");
    println!("‚ö†Ô∏è  WARNING: This test may hang during authentication");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º server –∏ –¥–≤–∞ client'–∞
        let (mut server_node, server_commander, mut server_events, _server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client1_node, client1_commander, _client1_events, _) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client2_node, client2_commander, _client2_events, _) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_millis(100)).await;
        });
        let client1_handle = tokio::spawn(async move {
            client1_node.run_with_cleanup_interval(Duration::from_millis(100)).await;
        });
        let client2_handle = tokio::spawn(async move {
            client2_node.run_with_cleanup_interval(Duration::from_millis(100)).await;
        });
        
        // –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç
        println!("Starting server listener...");
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let server_addr = tokio::time::timeout(Duration::from_secs(5), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No address");
        }).await.unwrap();
        
        println!("Server listening on: {}", server_addr);
        
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–æ–Ω–∫–∏
        println!("Client1 connecting...");
        let result1 = client1_commander.connect_with_timeout(server_addr.clone(), 5).await;
        println!("Client1 connect result: {:?}", result1);
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é —á–∞—Å—Ç–∏—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        println!("Waiting for first connection to stabilize...");
        tokio::time::sleep(Duration::from_secs(2)).await;
        
        println!("Client2 connecting...");
        let result2 = client2_commander.connect_with_timeout(server_addr.clone(), 5).await;
        println!("Client2 connect result: {:?}", result2);
        
        // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –¢–£–¢ –ß–ê–°–¢–û –ó–ê–í–ò–°–ê–ï–¢ –ù–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
        println!("Waiting for authentication to complete...");
        tokio::time::sleep(Duration::from_secs(5)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        println!("Checking server connections...");
        let server_connections = server_commander.get_all_connections().await.unwrap_or_default();
        println!("Server has {} connections", server_connections.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        println!("Checking network state...");
        let network_state = server_commander.get_network_state().await.unwrap();
        println!("Network state: {} total connections, {} authenticated peers", 
                 network_state.total_connections, network_state.authenticated_peers);
        
        // Cleanup
        client1_handle.abort();
        client2_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Multiple connections test completed"),
        Err(_) => panic!("‚è∞ Multiple connections test timed out ({}s)", test_timeout.as_secs()),
    }
}

/// –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö —Ü–∏–∫–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
/// –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
/// –ü–†–ò–ß–ò–ù–ê: –ë—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã –Ω–µ –¥–∞—é—Ç –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
#[tokio::test]
async fn test_rapid_connect_disconnect() {
    let test_timeout = Duration::from_secs(30); // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
    
    println!("üß™ Testing rapid connect/disconnect cycles");
    println!("‚ö†Ô∏è  WARNING: This test may hang during authentication cycles");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let (mut client_node, client_commander, _client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_millis(50)).await;
        });
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_millis(50)).await;
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        println!("Setting up server...");
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
        
        let server_addr = tokio::time::timeout(Duration::from_secs(5), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return addr;
                }
            }
            panic!("No address");
        }).await.unwrap();
        
        println!("Server is listening on {}", server_addr);
        
        let mut successful_cycles = 0;
        let total_cycles = 3;
        
        for i in 0..total_cycles {
            println!("  Cycle {}/{}", i + 1, total_cycles);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            let connect_start = std::time::Instant::now();
            println!("    Connecting...");
            let connect_result = client_commander.connect_with_timeout(server_addr.clone(), 8).await;
            let connect_elapsed = connect_start.elapsed();
            
            println!("    Connect attempt took {:?}: {:?}", connect_elapsed, connect_result);
            
            if connect_result.is_ok() {
                // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                // –¢–£–¢ –ß–ê–°–¢–û –ó–ê–í–ò–°–ê–ï–¢
                println!("    Waiting for connection to stabilize and auth to complete...");
                tokio::time::sleep(Duration::from_secs(3)).await;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                println!("    Checking connection state...");
                let connections = client_commander.get_all_connections().await.unwrap_or_default();
                let active_connections = connections.iter().filter(|c| c.is_active()).count();
                println!("    Active connections: {}", active_connections);
                
                if active_connections > 0 {
                    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
                    println!("    Disconnecting...");
                    let disconnect_result = client_commander.disconnect(server_peer_id).await;
                    println!("    Disconnect result: {:?}", disconnect_result);
                    
                    if disconnect_result.is_ok() {
                        successful_cycles += 1;
                    }
                    
                    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                    println!("    Waiting for cleanup...");
                    tokio::time::sleep(Duration::from_secs(2)).await;
                } else {
                    println!("    No active connections found, skipping disconnect");
                }
            } else {
                println!("    Connect failed: {:?}", connect_result);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
            println!("    Checking final state...");
            let final_connections = client_commander.get_all_connections().await.unwrap_or_default();
            let final_active = final_connections.iter().filter(|c| c.is_active()).count();
            println!("    Final active connections after cycle: {}", final_active);
        }
        
        println!("‚úÖ Completed {}/{} rapid connect/disconnect cycles", successful_cycles, total_cycles);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let final_connections = client_commander.get_all_connections().await.unwrap();
        let active_connections = final_connections.iter().filter(|c| c.is_active()).count();
        
        println!("Final active connections: {}", active_connections);
        
        // Cleanup
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Rapid connect/disconnect test completed"),
        Err(_) => panic!("‚è∞ Rapid connect/disconnect test timed out ({}s)", test_timeout.as_secs()),
    }
}

// ==========================================
// –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// ==========================================

/// –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
/// –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –≥–¥–µ –∏–º–µ–Ω–Ω–æ –∑–∞–≤–∏—Å–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
#[tokio::test]
async fn test_debug_authentication_hang() {
    println!("üîß Debug test for authentication hang");
    
    let (mut server_node, server_commander, mut server_events, server_peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
    
    let (mut client_node, client_commander, mut client_events, _client_peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
    
    let server_handle = tokio::spawn(async move {
        server_node.run_with_cleanup_interval(Duration::from_millis(100)).await;
    });
    let client_handle = tokio::spawn(async move {
        client_node.run_with_cleanup_interval(Duration::from_millis(100)).await;
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    println!("1. Setting up server...");
    server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
    
    let server_addr = tokio::time::timeout(Duration::from_secs(5), async {
        while let Some(event) = server_events.recv().await {
            if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                return addr;
            }
        }
        panic!("No address");
    }).await.unwrap();
    
    println!("2. Server listening on: {}", server_addr);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    println!("3. Initiating connection...");
    let connect_result = client_commander.connect_with_timeout(server_addr, 10).await;
    println!("4. Connect result: {:?}", connect_result);
    
    if connect_result.is_ok() {
        println!("5. Connection established, monitoring events...");
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        let mut event_count = 0;
        let start_time = std::time::Instant::now();
        
        while start_time.elapsed() < Duration::from_secs(10) && event_count < 20 {
            tokio::select! {
                Some(event) = client_events.recv() => {
                    event_count += 1;
                    println!("  Event {}: {:?}", event_count, event);
                    
                    match event {
                        NetworkEvent::PeerConnected { peer_id } if peer_id == server_peer_id => {
                            println!("  ‚úÖ Peer connected successfully");
                            break;
                        }
                        NetworkEvent::ConnectionError { error, .. } => {
                            println!("  ‚ùå Connection error: {}", error);
                            break;
                        }
                        _ => {}
                    }
                }
                _ = tokio::time::sleep(Duration::from_millis(500)) => {
                    println!("  ... still waiting for events ({}s elapsed)", start_time.elapsed().as_secs());
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    let connections = client_commander.get_all_connections().await.unwrap_or_default();
                    if !connections.is_empty() {
                        let conn = &connections[0];
                        println!("  Connection state: {:?}, Auth: {:?}", 
                                conn.connection_state, conn.auth_status);
                    }
                }
            }
        }
        
        println!("6. Event monitoring completed");
    }
    
    // Cleanup
    client_handle.abort();
    server_handle.abort();
    tokio::time::sleep(Duration::from_millis(100)).await;
    
    println!("‚úÖ Debug test completed");
}

/// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
#[tokio::test]
async fn test_minimum_auth_time() {
    println!("üîß Testing minimum time required for authentication");
    
    let (mut server_node, server_commander, mut server_events, server_peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
    
    let (mut client_node, client_commander, mut client_events, _client_peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await.unwrap();
    
    let server_handle = tokio::spawn(async move {
        server_node.run_with_cleanup_interval(Duration::from_millis(50)).await;
    });
    let client_handle = tokio::spawn(async move {
        client_node.run_with_cleanup_interval(Duration::from_millis(50)).await;
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await.unwrap();
    
    let server_addr = tokio::time::timeout(Duration::from_secs(5), async {
        while let Some(event) = server_events.recv().await {
            if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                return addr;
            }
        }
        panic!("No address");
    }).await.unwrap();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    let test_times = [1, 2, 5, 10, 15, 20]; // —Å–µ–∫—É–Ω–¥—ã
    
    for &wait_time in &test_times {
        println!("Testing with {}s wait time:", wait_time);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        let connect_result = client_commander.connect_with_timeout(server_addr.clone(), 5).await;
        if connect_result.is_ok() {
            let start_time = std::time::Instant::now();
            
            // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            tokio::time::sleep(Duration::from_secs(wait_time)).await;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            let connections = client_commander.get_all_connections().await.unwrap_or_default();
            if let Some(conn) = connections.first() {
                println!("  Connection state after {}s: {:?}, Auth: {:?}", 
                        wait_time, conn.connection_state, conn.auth_status);
                
                let is_authenticated = matches!(conn.auth_status, 
                    xnetwork::connection_management::AuthStatus::Authenticated);
                
                if is_authenticated {
                    println!("  ‚úÖ Authentication completed in ‚â§{}s", wait_time);
                } else {
                    println!("  ‚è≥ Authentication still in progress after {}s", wait_time);
                }
            }
            
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            let _ = client_commander.disconnect(server_peer_id).await;
            tokio::time::sleep(Duration::from_millis(500)).await;
        } else {
            println!("  ‚ùå Connection failed");
        }
    }
    
    // Cleanup
    client_handle.abort();
    server_handle.abort();
    
    println!("‚úÖ Minimum auth time test completed");
}