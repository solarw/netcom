// tests/test_connections_problematic.rs - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
//
// –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –∏ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏

use std::time::Duration;
use libp2p::PeerId;
use xnetwork::{
    XRoutesConfig, 
    events::NetworkEvent,
};

mod common;
use common::*;

// ==========================================
// HELPER FUNCTIONS - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
// ==========================================

/// –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
async fn wait_for_event_adaptive<F>(
    events: &mut tokio::sync::mpsc::Receiver<NetworkEvent>,
    predicate: F,
    max_wait_ms: u64,
) -> bool 
where
    F: Fn(&NetworkEvent) -> bool,
{
    let start = std::time::Instant::now();
    let timeout = Duration::from_millis(max_wait_ms);
    
    while start.elapsed() < timeout {
        tokio::select! {
            Some(event) = events.recv() => {
                if predicate(&event) {
                    return true;
                }
            }
            _ = tokio::time::sleep(Duration::from_millis(50)) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 50ms
            }
        }
    }
    false
}

/// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async fn check_connection_ready(commander: &xnetwork::Commander) -> bool {
    if let Ok(connections) = commander.get_all_connections().await {
        connections.iter().any(|c| c.is_active())
    } else {
        false
    }
}

/// –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
async fn wait_for_connection_ready(commander: &xnetwork::Commander, max_wait_ms: u64) -> bool {
    let start = std::time::Instant::now();
    let timeout = Duration::from_millis(max_wait_ms);
    
    while start.elapsed() < timeout {
        if check_connection_ready(commander).await {
            return true;
        }
        tokio::time::sleep(Duration::from_millis(25)).await; // –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
    false
}

// ==========================================
// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´
// ==========================================

/// –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ - –£–°–ö–û–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#[tokio::test]
async fn test_network_state_tracking_fast() {
    let test_timeout = Duration::from_millis(3000); // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 15s –¥–æ 3s
    
    println!("üß™ Testing network state tracking (FAST version)");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("PANIC: Failed to create test node");
        
        let node_handle = tokio::spawn(async move {
            // –û—á–µ–Ω—å —á–∞—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
            node.run_with_cleanup_interval(Duration::from_millis(50)).await;
        });
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
        println!("Getting initial network state...");
        let initial_state = commander.get_network_state().await
            .expect("PANIC: Failed to get initial network state");
        
        println!("Initial state: {} connections, uptime: {:?}", 
                 initial_state.total_connections, initial_state.uptime);
        
        assert_eq!(initial_state.local_peer_id, peer_id, "PANIC: Local peer ID mismatch");
        assert_eq!(initial_state.total_connections, 0, "PANIC: Should start with 0 connections");
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        println!("Starting listener with timeout...");
        let listen_result = tokio::time::timeout(
            Duration::from_millis(1000), // 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è
            commander.listen_port(Some("127.0.0.1".to_string()), 0)
        ).await;
        
        let listener_started = match listen_result {
            Ok(Ok(_)) => {
                println!("‚úÖ Listener started successfully");
                true
            }
            Ok(Err(e)) => {
                panic!("PANIC: Listener failed to start: {}", e);
            }
            Err(_) => {
                panic!("PANIC: Listener start timed out after 1000ms");
            }
        };
        
        if listener_started {
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            tokio::time::sleep(Duration::from_millis(200)).await;
            
            let updated_state = commander.get_network_state().await
                .expect("PANIC: Failed to get updated network state");
            
            println!("Updated state: {} addresses, uptime: {:?}", 
                     updated_state.listening_addresses.len(), updated_state.uptime);
            
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            let listen_addresses = commander.get_listen_addresses().await
                .expect("PANIC: Failed to get listen addresses");
            
            println!("Listening addresses: {}", listen_addresses.len());
            
            assert!(updated_state.uptime >= initial_state.uptime, 
                   "PANIC: Uptime should not decrease");
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å–ª—É—à–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å–∞
            if updated_state.listening_addresses.is_empty() && listen_addresses.is_empty() {
                panic!("PANIC: Listener started but no listening addresses found");
            }
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let final_state = commander.get_network_state().await
            .expect("PANIC: Failed to get final network state");
        println!("Final state verified, uptime: {:?}", final_state.uptime);
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(50)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ FAST network state tracking test completed"),
        Err(_) => panic!("PANIC: FAST network state test timed out ({}ms)", test_timeout.as_millis()),
    }
}

/// –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π - –£–°–ö–û–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#[tokio::test]
async fn test_multiple_connections_same_peer_fast() {
    let test_timeout = Duration::from_millis(5000); // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 20s –¥–æ 5s
    
    println!("üß™ Testing multiple connections (FAST version)");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —Å –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("PANIC: Failed to create server node");
        
        let (mut client1_node, client1_commander, _client1_events, _) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("PANIC: Failed to create client node");
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_millis(25)).await;
        });
        let client1_handle = tokio::spawn(async move {
            client1_node.run_with_cleanup_interval(Duration::from_millis(25)).await;
        });
        
        // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
        println!("Quick server setup...");
        let listen_result = tokio::time::timeout(
            Duration::from_millis(500),
            server_commander.listen_port(Some("127.0.0.1".to_string()), 0)
        ).await;
        
        let _listen_ok = match listen_result {
            Ok(Ok(_)) => true,
            Ok(Err(e)) => panic!("PANIC: Server listen failed: {}", e),
            Err(_) => panic!("PANIC: Server setup timed out after 500ms"),
        };
        
        // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        let server_addr = tokio::time::timeout(Duration::from_millis(1000), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return Some(addr);
                }
            }
            None
        }).await;
        
        let addr = match server_addr {
            Ok(Some(addr)) => {
                println!("Server ready at: {}", addr);
                addr
            }
            Ok(None) => panic!("PANIC: No server address received within 1000ms"),
            Err(_) => panic!("PANIC: Server address timeout"),
        };
        
        // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        println!("Quick client connection...");
        let connect_result = tokio::time::timeout(
            Duration::from_millis(1500), // 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            client1_commander.connect_with_timeout(addr, 2)
        ).await;
        
        let connection_established = match connect_result {
            Ok(Ok(_)) => {
                println!("‚úÖ Connection established quickly");
                true
            }
            Ok(Err(e)) => {
                // –í —Ç–µ—Å—Ç–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                println!("Connection result: {}", e);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                false
            }
            Err(_) => panic!("PANIC: Connection timed out after 1500ms"),
        };
        
        // –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        println!("Quick stabilization check...");
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è
        let server_connections = server_commander.get_all_connections().await
            .expect("PANIC: Failed to get server connections");
        let network_state = server_commander.get_network_state().await
            .expect("PANIC: Failed to get network state");
        
        println!("Quick check: {} connections, {} total", 
                 server_connections.len(), network_state.total_connections);
        
        // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if connection_established && server_connections.is_empty() {
            panic!("PANIC: Connection established but no connections found on server");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        assert_eq!(server_connections.len(), network_state.total_connections,
                  "PANIC: Connection count mismatch between APIs");
        
        // –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞
        client1_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(50)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ FAST multiple connections test completed"),
        Err(_) => panic!("PANIC: FAST multiple connections test timed out ({}ms)", test_timeout.as_millis()),
    }
}

/// –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö —Ü–∏–∫–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –£–°–ö–û–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#[tokio::test]
async fn test_rapid_connect_disconnect_fast() {
    let test_timeout = Duration::from_millis(8000); // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 30s –¥–æ 8s
    
    println!("üß™ Testing rapid connect/disconnect (FAST version)");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut server_node, server_commander, mut server_events, server_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("PANIC: Failed to create server node");
        
        let (mut client_node, client_commander, _client_events, _client_peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("PANIC: Failed to create client node");
        
        let server_handle = tokio::spawn(async move {
            server_node.run_with_cleanup_interval(Duration::from_millis(20)).await;
        });
        let client_handle = tokio::spawn(async move {
            client_node.run_with_cleanup_interval(Duration::from_millis(20)).await;
        });
        
        // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        println!("Ultra-fast server setup...");
        let listen_result = tokio::time::timeout(
            Duration::from_millis(300),
            server_commander.listen_port(Some("127.0.0.1".to_string()), 0)
        ).await;
        
        match listen_result {
            Ok(Ok(_)) => {},
            Ok(Err(e)) => panic!("PANIC: Server listen failed: {}", e),
            Err(_) => panic!("PANIC: Server setup timed out after 300ms"),
        }
        
        let server_addr = tokio::time::timeout(Duration::from_millis(500), async {
            while let Some(event) = server_events.recv().await {
                if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                    return Some(addr);
                }
            }
            None
        }).await;
        
        let addr = match server_addr {
            Ok(Some(addr)) => {
                println!("Server ready at: {}", addr);
                addr
            }
            Ok(None) => panic!("PANIC: No server address received within 500ms"),
            Err(_) => panic!("PANIC: Server address timeout"),
        };
        
        let mut successful_cycles = 0;
        let total_cycles = 2; // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
        let required_success = 1; // –ú–∏–Ω–∏–º—É–º 1 —É—Å–ø–µ—à–Ω—ã–π —Ü–∏–∫–ª
        
        for i in 0..total_cycles {
            println!("  Fast cycle {}/{}", i + 1, total_cycles);
            let cycle_start = std::time::Instant::now();
            
            // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            let connect_result = tokio::time::timeout(
                Duration::from_millis(800), // 800ms –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                client_commander.connect_with_timeout(addr.clone(), 1)
            ).await;
            
            let connected = match connect_result {
                Ok(Ok(_)) => {
                    println!("    Quick connect OK");
                    true
                }
                Ok(Err(e)) => {
                    println!("    Connect failed: {}", e);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                    false
                }
                Err(_) => panic!("PANIC: Connect timed out after 800ms in cycle {}", i + 1),
            };
            
            if connected {
                // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                let ready = wait_for_connection_ready(&client_commander, 300).await;
                
                if ready {
                    println!("    Connection ready");
                    successful_cycles += 1;
                    
                    // –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                    let disconnect_result = tokio::time::timeout(
                        Duration::from_millis(300),
                        client_commander.disconnect(server_peer_id)
                    ).await;
                    
                    match disconnect_result {
                        Ok(Ok(_)) => println!("    Quick disconnect OK"),
                        Ok(Err(e)) => println!("    Disconnect failed: {}", e),
                        Err(_) => panic!("PANIC: Disconnect timed out after 300ms in cycle {}", i + 1),
                    }
                    
                    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                    tokio::time::sleep(Duration::from_millis(100)).await;
                } else {
                    println!("    Connection not ready, skipping disconnect");
                }
            }
            
            let cycle_time = cycle_start.elapsed();
            println!("    Cycle completed in {:?}", cycle_time);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–∏–∫–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π
            if cycle_time > Duration::from_millis(2000) {
                panic!("PANIC: Cycle {} took too long: {:?}", i + 1, cycle_time);
            }
            
            // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            tokio::time::sleep(Duration::from_millis(50)).await;
        }
        
        println!("‚úÖ Completed {}/{} fast cycles", successful_cycles, total_cycles);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π —Ü–∏–∫–ª
        if successful_cycles < required_success {
            panic!("PANIC: Only {}/{} cycles succeeded, expected at least {}", 
                   successful_cycles, total_cycles, required_success);
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        client_handle.abort();
        server_handle.abort();
        tokio::time::sleep(Duration::from_millis(50)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ FAST rapid connect/disconnect test completed"),
        Err(_) => panic!("PANIC: FAST rapid test timed out ({}ms)", test_timeout.as_millis()),
    }
}

// ==========================================
// –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ë–´–°–¢–†–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´
// ==========================================

/// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–µ
#[tokio::test]
async fn test_debug_bottlenecks_fast() {
    println!("üîß Quick bottleneck detection test");
    
    let start_total = std::time::Instant::now();
    
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞
    let create_start = std::time::Instant::now();
    let (mut node, commander, _events, peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await
        .expect("PANIC: Failed to create test node");
    let create_time = create_start.elapsed();
    println!("‚úÖ Node creation: {:?}", create_time);
    
    // –ü–†–û–í–ï–†–ö–ê: —Å–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
    if create_time > Duration::from_millis(1000) {
        panic!("PANIC: Node creation is too slow: {:?} (max 1000ms)", create_time);
    }
    
    // –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —É–∑–ª–∞
    let run_start = std::time::Instant::now();
    let node_handle = tokio::spawn(async move {
        node.run_with_cleanup_interval(Duration::from_millis(10)).await;
    });
    let run_time = run_start.elapsed();
    println!("‚úÖ Node spawn: {:?}", run_time);
    
    // –ü–†–û–í–ï–†–ö–ê: –∑–∞–ø—É—Å–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 100ms
    if run_time > Duration::from_millis(100) {
        panic!("PANIC: Node spawn is too slow: {:?} (max 100ms)", run_time);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
    tokio::time::sleep(Duration::from_millis(50)).await;
    
    // –¢–µ—Å—Ç 3: API –≤—ã–∑–æ–≤—ã
    let api_start = std::time::Instant::now();
    let state = commander.get_network_state().await;
    let api_time = api_start.elapsed();
    println!("‚úÖ API call (get_network_state): {:?} - Success: {}", api_time, state.is_ok());
    
    // –ü–†–û–í–ï–†–ö–ê: API –¥–æ–ª–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ
    if api_time > Duration::from_millis(200) {
        panic!("PANIC: API call is too slow: {:?} (max 200ms)", api_time);
    }
    
    // –ü–†–û–í–ï–†–ö–ê: API –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
    if state.is_err() {
        panic!("PANIC: get_network_state failed: {:?}", state.err());
    }
    
    let network_state = state.unwrap();
    assert_eq!(network_state.local_peer_id, peer_id, "PANIC: Peer ID mismatch in network state");
    
    // –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è
    let listen_start = std::time::Instant::now();
    let listen_result = tokio::time::timeout(
        Duration::from_millis(500), // –ñ–µ—Å—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª—è
        commander.listen_port(Some("127.0.0.1".to_string()), 0)
    ).await;
    let listen_time = listen_start.elapsed();
    println!("‚úÖ Listen attempt: {:?} - Success: {}", listen_time, listen_result.is_ok());
    
    // –ü–†–û–í–ï–†–ö–ê: —Å–ª—É—à–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
    match listen_result {
        Ok(Ok(_)) => {
            println!("‚úÖ Listener started successfully");
        }
        Ok(Err(e)) => {
            panic!("PANIC: Listener failed to start: {}", e);
        }
        Err(_) => {
            panic!("PANIC: Listener start timed out after 500ms");
        }
    }
    
    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è
    tokio::time::sleep(Duration::from_millis(100)).await; // –î–∞–µ–º –≤—Ä–µ–º—è –∞–¥—Ä–µ—Å–∞–º –ø–æ—è–≤–∏—Ç—å—Å—è
    
    let addr_start = std::time::Instant::now();
    let addresses = commander.get_listen_addresses().await;
    let addr_time = addr_start.elapsed();
    
    match addresses {
        Ok(addrs) => {
            println!("‚úÖ Get addresses: {:?} - {} addresses", addr_time, addrs.len());
            
            // –ü–†–û–í–ï–†–ö–ê: –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥—Ä–µ—Å–∞
            if addrs.is_empty() {
                panic!("PANIC: No listening addresses found after successful listen start");
            }
            
            // –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for (i, addr) in addrs.iter().enumerate() {
                println!("    Address {}: {}", i + 1, addr);
            }
        }
        Err(e) => {
            panic!("PANIC: Failed to get listen addresses: {}", e);
        }
    }
    
    // –ü–†–û–í–ï–†–ö–ê: –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º
    if addr_time > Duration::from_millis(100) {
        panic!("PANIC: Get addresses is too slow: {:?} (max 100ms)", addr_time);
    }
    
    // –¢–µ—Å—Ç 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    let final_state = commander.get_network_state().await
        .expect("PANIC: Failed to get final network state");
    
    println!("Final network state:");
    println!("  Peer ID: {}", final_state.local_peer_id);
    println!("  Listening addresses: {}", final_state.listening_addresses.len());
    println!("  Total connections: {}", final_state.total_connections);
    println!("  Uptime: {:?}", final_state.uptime);
    
    // –ü–†–û–í–ï–†–ö–ê: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º
    if final_state.listening_addresses.is_empty() {
        panic!("PANIC: Network state shows no listening addresses after successful setup");
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    node_handle.abort();
    tokio::time::sleep(Duration::from_millis(50)).await;
    
    let total_time = start_total.elapsed();
    println!("‚úÖ Total bottleneck test time: {:?}", total_time);
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤–µ—Å—å —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º
    if total_time > Duration::from_millis(2000) {
        panic!("PANIC: Total test time is too slow: {:?} (max 2000ms)", total_time);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç —Å –ø–∞–Ω–∏–∫–æ–π
    if create_time > Duration::from_millis(500) {
        panic!("PANIC: BOTTLENECK DETECTED: Node creation is slow ({:?})", create_time);
    }
    if api_time > Duration::from_millis(50) {
        println!("‚ö†Ô∏è  WARNING: API calls are slower than optimal ({:?})", api_time);
    }
    if listen_time > Duration::from_millis(300) {
        println!("‚ö†Ô∏è  WARNING: Listen setup is slower than optimal ({:?})", listen_time);
    }
}

/// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
#[tokio::test]
async fn test_minimal_auth_timing() {
    println!("üîß Minimal auth timing test");
    
    let (mut server_node, server_commander, mut server_events, server_peer_id) = 
        create_test_node_with_config(XRoutesConfig::client()).await
        .expect("PANIC: Failed to create server node");
    
    let (mut client_node, client_commander, mut client_events, _) = 
        create_test_node_with_config(XRoutesConfig::client()).await
        .expect("PANIC: Failed to create client node");
    
    let server_handle = tokio::spawn(async move {
        server_node.run_with_cleanup_interval(Duration::from_millis(10)).await;
    });
    let client_handle = tokio::spawn(async move {
        client_node.run_with_cleanup_interval(Duration::from_millis(10)).await;
    });
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    let listen_result = tokio::time::timeout(
        Duration::from_millis(500),
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0)
    ).await;
    
    match listen_result {
        Ok(Ok(_)) => {},
        Ok(Err(e)) => panic!("PANIC: Server listen failed: {}", e),
        Err(_) => panic!("PANIC: Server listen timed out after 500ms"),
    }
    
    let server_addr = tokio::time::timeout(Duration::from_millis(500), async {
        while let Some(event) = server_events.recv().await {
            if let NetworkEvent::ListeningOnAddress { full_addr: Some(addr), .. } = event {
                return Some(addr);
            }
        }
        None
    }).await;
    
    let addr = match server_addr {
        Ok(Some(addr)) => addr,
        Ok(None) => panic!("PANIC: No server address received within 500ms"),
        Err(_) => panic!("PANIC: Server address timeout"),
    };
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
    let connect_start = std::time::Instant::now();
    let connect_result = tokio::time::timeout(
        Duration::from_millis(1000),
        client_commander.connect_with_timeout(addr, 1)
    ).await;
    
    match connect_result {
        Ok(Ok(_)) => println!("‚úÖ Connection initiated successfully"),
        Ok(Err(e)) => println!("Connection failed: {} (continuing to monitor events)", e),
        Err(_) => panic!("PANIC: Connection attempt timed out after 1000ms"),
    }
    
    println!("Monitoring auth events for 2 seconds...");
    let mut events_received = 0;
    let mut connection_time = None;
    let mut auth_time = None;
    let mut peer_connected = false;
    
    let monitor_start = std::time::Instant::now();
    while monitor_start.elapsed() < Duration::from_millis(2000) && events_received < 10 {
        tokio::select! {
            Some(event) = client_events.recv() => {
                events_received += 1;
                let elapsed = connect_start.elapsed();
                
                match event {
                    NetworkEvent::ConnectionOpened { peer_id, .. } if peer_id == server_peer_id => {
                        connection_time = Some(elapsed);
                        println!("  üì° Connection opened at {:?}", elapsed);
                    }
                    NetworkEvent::PeerConnected { peer_id } if peer_id == server_peer_id => {
                        peer_connected = true;
                        println!("  ü§ù Peer connected at {:?}", elapsed);
                    }
                    NetworkEvent::AuthEvent { .. } => {
                        auth_time = Some(elapsed);
                        println!("  üîê Auth event at {:?}", elapsed);
                    }
                    NetworkEvent::ConnectionError { error, .. } => {
                        println!("  ‚ùå Connection error at {:?}: {}", elapsed, error);
                    }
                    _ => {
                        println!("  üì® Other event at {:?}: {:?}", elapsed, event);
                    }
                }
            }
            _ = tokio::time::sleep(Duration::from_millis(200)) => {
                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if let Ok(connections) = client_commander.get_all_connections().await {
                    if !connections.is_empty() {
                        let conn = &connections[0];
                        println!("  üìä Connection state: {:?}, Auth: {:?}", 
                                conn.connection_state, conn.auth_status);
                    }
                }
            }
        }
    }
    
    println!("Auth timing summary:");
    println!("  Events received: {}", events_received);
    
    // –ü–†–û–í–ï–†–ö–ò: –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
    if events_received == 0 {
        println!("‚ö†Ô∏è  WARNING: No events received (connection may have failed silently)");
    }
    
    if let Some(conn_time) = connection_time {
        println!("  Connection time: {:?}", conn_time);
        
        // –ü–†–û–í–ï–†–ö–ê: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if conn_time > Duration::from_millis(1500) {
            println!("‚ö†Ô∏è  WARNING: Connection took longer than expected: {:?}", conn_time);
        }
    } else {
        println!("  No connection opened event received");
    }
    
    if let Some(a_time) = auth_time {
        println!("  Auth event time: {:?}", a_time);
        
        // –ü–†–û–í–ï–†–ö–ê: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π (—ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
        if a_time < Duration::from_millis(10) {
            println!("‚ö†Ô∏è  WARNING: Auth happened suspiciously quickly: {:?}", a_time);
        }
    } else {
        println!("  No auth events received (normal for quick test without full handshake)");
    }
    
    if peer_connected {
        println!("  ‚úÖ Peer connection established successfully");
    } else {
        println!("  ‚ÑπÔ∏è  Peer connection not fully established (normal for timing test)");
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞
    client_handle.abort();
    server_handle.abort();
    tokio::time::sleep(Duration::from_millis(25)).await;
    
    println!("‚úÖ Minimal auth timing test completed");
}