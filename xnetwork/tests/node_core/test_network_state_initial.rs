// tests/node_core/test_network_state_initial.rs - –¢–µ—Å—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (PRIORITY 1)

use std::time::Duration;
use libp2p::identity;
use xnetwork::{NetworkNode, XRoutesConfig};
use crate::test_utils::{TestNode, NodeExt, create_test_por};

/// –¢–µ—Å—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞
#[tokio::test]
async fn test_network_state_initial() {
    println!("üîÑ Starting test_network_state_initial...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Peer ID
    assert!(!node.peer_id.to_string().is_empty(), "Node should have valid Peer ID");
    println!("‚úÖ Node has valid Peer ID: {}", node.peer_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –Ω–µ —Å–ª—É—à–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    let initial_state = node.commander.get_network_state().await
        .expect("Failed to get initial network state");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    assert_eq!(initial_state.total_connections, 0, "Initial connections should be 0");
    assert!(initial_state.listening_addresses.is_empty(), "Initial listening addresses should be empty");
    assert_eq!(initial_state.authenticated_peers, 0, "Initial authenticated peers should be 0");
    
    println!("‚úÖ Initial network state test passed - node created with clean state");
}

/// –¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
#[tokio::test]
async fn test_network_state_after_listening() {
    println!("üîÑ Starting test_network_state_after_listening...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    println!("‚úÖ Node started listening on: {}", listen_addr);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    let state_after_listening = node.commander.get_network_state().await
        .expect("Failed to get network state after listening");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª —Å–ª—É—à–∞–µ—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∞–¥—Ä–µ—Å–µ
    assert!(!state_after_listening.listening_addresses.is_empty(), 
            "Should have listening addresses after starting");
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    assert!(listen_addr.to_string().contains("/ip4/127.0.0.1/udp/"),
            "Listening address should be UDP on localhost");
    assert!(listen_addr.to_string().contains("/quic-v1"),
            "Listening address should use QUIC protocol");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—Å–µ –µ—â–µ –Ω–µ—Ç
    assert_eq!(state_after_listening.total_connections, 0, 
               "Connections should still be 0 after listening");
    assert_eq!(state_after_listening.authenticated_peers, 0, 
            "Authenticated peers should still be 0 after listening");
    
    println!("‚úÖ Network state after listening test passed - node listening with clean connections");
}

/// –¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
#[tokio::test]
async fn test_network_state_after_shutdown() {
    println!("üîÑ Starting test_network_state_after_shutdown...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    println!("‚úÖ Node started listening on: {}", listen_addr);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —É–∑–ª–∞
    node.commander.shutdown().await.expect("Failed to send shutdown command");
    tokio::time::timeout(Duration::from_secs(5), handle).await
        .expect("Node shutdown timed out");
    println!("‚úÖ Node shutdown completed");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π
    let state_result = node.commander.get_network_state().await;
    assert!(state_result.is_err(), "Should not be able to get network state after shutdown");
    
    println!("‚úÖ Network state after shutdown test passed - node properly terminated");
}
