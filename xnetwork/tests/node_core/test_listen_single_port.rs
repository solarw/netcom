// tests/node_core/test_listen_single_port.rs - –¢–µ—Å—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ (PRIORITY 1)

use std::time::Duration;
use libp2p::identity;
use xnetwork::{NetworkNode, XRoutesConfig};
use crate::test_utils::{TestNode, NodeExt, create_test_por};

/// –¢–µ—Å—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
#[tokio::test]
async fn test_listen_single_port() {
    println!("üîÑ Starting test_listen_single_port...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    println!("‚úÖ Node started listening on: {}", listen_addr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    assert!(!listen_addr.to_string().is_empty(), "Listening address should not be empty");
    assert!(listen_addr.to_string().contains("/ip4/127.0.0.1/udp/"), 
            "Listening address should be UDP on localhost");
    assert!(listen_addr.to_string().contains("/quic-v1"), 
            "Listening address should use QUIC protocol");
    assert!(listen_addr.to_string().contains("/p2p/"), 
            "Listening address should include peer ID");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Peer ID
    assert!(listen_addr.to_string().contains(&node.peer_id.to_string()),
            "Listening address should contain node's Peer ID");
    
    println!("‚úÖ Single port listening test passed - node listening on valid address");
}

/// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
#[tokio::test]
async fn test_listen_address_events() {
    println!("üîÑ Starting test_listen_address_events...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    println!("‚úÖ Node started listening on: {}", listen_addr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç
    let state = node.commander.get_network_state().await
        .expect("Failed to get network state");
    
    println!("üìä Network state listening addresses: {:?}", state.listening_addresses);
    println!("üìä Expected listen address: {}", listen_addr);
    
    assert!(!state.listening_addresses.is_empty(), 
            "Node should have listening addresses after starting");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    let has_valid_listening_addr = state.listening_addresses.iter().any(|addr| {
        let addr_str = addr.to_string();
        let is_valid = addr_str.contains("/ip4/127.0.0.1/udp/") && 
                      addr_str.contains("/quic-v1");
        if is_valid {
            println!("‚úÖ Found valid listening address: {}", addr_str);
        }
        is_valid
    });
    assert!(has_valid_listening_addr, 
            "Should have at least one valid listening address");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—é—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ —Ä–∞–≤–Ω–æ 1
    assert_eq!(state.listening_addresses.len(), 1, 
               "Should have exactly one listening address");
    
    println!("‚úÖ Listen address events test passed - node properly reporting listening state");
}

/// –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã)
#[tokio::test]
async fn test_listen_multiple_calls() {
    println!("üîÑ Starting test_listen_multiple_calls...");
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, commander, events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    let first_addr = node.listen_with_test_config().await
        .expect("Failed to start listening first time");
    println!("‚úÖ First listen call succeeded: {}", first_addr);
    
    // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å)
    let second_addr = node.listen_with_test_config().await
        .expect("Failed to start listening second time");
    println!("‚úÖ Second listen call succeeded: {}", second_addr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    assert!(first_addr.to_string().contains("/ip4/127.0.0.1/udp/"), 
            "First address should be UDP on localhost");
    assert!(first_addr.to_string().contains("/quic-v1"), 
            "First address should use QUIC protocol");
    assert!(second_addr.to_string().contains("/ip4/127.0.0.1/udp/"), 
            "Second address should be UDP on localhost");
    assert!(second_addr.to_string().contains("/quic-v1"), 
            "Second address should use QUIC protocol");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    let state = node.commander.get_network_state().await
        .expect("Failed to get network state");
    
    assert!(!state.listening_addresses.is_empty(), 
            "Should have at least one listening address after multiple calls");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    let all_addresses_valid = state.listening_addresses.iter().all(|addr| {
        let addr_str = addr.to_string();
        addr_str.contains("/ip4/127.0.0.1/udp/") && addr_str.contains("/quic-v1")
    });
    assert!(all_addresses_valid, 
            "All listening addresses should be valid");
    
    println!("‚úÖ Multiple listen calls test passed - node handles repeated calls correctly");
}
