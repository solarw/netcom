// tests/node_core/test_node_startup.rs - –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã (PRIORITY 1)

use std::time::Duration;
use libp2p::identity;
use xnetwork::{NetworkNode, XRoutesConfig};
use crate::test_utils::{TestNode, NodeExt, create_test_por};

/// –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
#[tokio::test]
async fn test_node_startup() {
    println!("üîÑ Starting test_node_startup...");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
    let mut node = TestNode::new().await.expect("Failed to create test node");
    println!("‚úÖ Node created with Peer ID: {}", node.peer_id);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É
    println!("üîÑ Starting to listen...");
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    println!("‚úÖ Listening started on address: {}", listen_addr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω
    assert!(!listen_addr.to_string().is_empty(), "Should get valid listening address");
    assert!(listen_addr.to_string().contains("/ip4/127.0.0.1/tcp/"), 
            "Listening address should be TCP on localhost");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Peer ID
    assert!(!node.peer_id.to_string().is_empty(), "Node should have valid Peer ID");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    println!("‚úÖ Node startup test passed - node started with address: {}", listen_addr);
}

/// –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
#[tokio::test]
async fn test_node_startup_configurations() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —É–∑–ª–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞
    let (server_node, _server_commander, _server_events, server_peer_id) = 
        crate::test_utils::create_test_node(true, false)
        .await
        .expect("Failed to create server node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut server_test_node = crate::test_utils::TestNode {
        node: server_node,
        commander: _server_commander,
        events: _server_events,
        peer_id: server_peer_id,
    };
    
    let server_addr = server_test_node.listen_with_test_config().await
        .expect("Failed to start server listening");
    
    assert!(!server_addr.to_string().is_empty(), "Server should get valid listening address");
    assert!(!server_test_node.peer_id.to_string().is_empty(), "Server should have valid Peer ID");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —É–∑–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º mDNS
    let (client_node, _client_commander, _client_events, client_peer_id) = 
        crate::test_utils::create_test_node(false, true)
        .await
        .expect("Failed to create client node");
    
    let mut client_test_node = crate::test_utils::TestNode {
        node: client_node,
        commander: _client_commander,
        events: _client_events,
        peer_id: client_peer_id,
    };
    
    let client_addr = client_test_node.listen_with_test_config().await
        .expect("Failed to start client listening");
    
    assert!(!client_addr.to_string().is_empty(), "Client should get valid listening address");
    assert!(!client_test_node.peer_id.to_string().is_empty(), "Client should have valid Peer ID");
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑–Ω—ã–µ
    assert_ne!(server_addr, client_addr, "Server and client should have different listening addresses");
    
    println!("‚úÖ Node startup configurations test passed - both server and client started successfully");
}

/// –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É–∑–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
#[tokio::test]
async fn test_multiple_nodes_startup() {
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–∑–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    let mut node1 = TestNode::new().await.expect("Failed to create first node");
    let mut node2 = TestNode::new().await.expect("Failed to create second node");
    let mut node3 = TestNode::new().await.expect("Failed to create third node");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —É–∑–ª—ã
    let addr1 = node1.listen_with_test_config().await.expect("Failed to start node1");
    let addr2 = node2.listen_with_test_config().await.expect("Failed to start node2");
    let addr3 = node3.listen_with_test_config().await.expect("Failed to start node3");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã –∑–∞–ø—É—â–µ–Ω—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
    assert!(!addr1.to_string().is_empty(), "Node1 should have valid listening address");
    assert!(!addr2.to_string().is_empty(), "Node2 should have valid listening address");
    assert!(!addr3.to_string().is_empty(), "Node3 should have valid listening address");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑–Ω—ã–µ
    assert_ne!(addr1, addr2, "Node1 and Node2 should have different addresses");
    assert_ne!(addr1, addr3, "Node1 and Node3 should have different addresses");
    assert_ne!(addr2, addr3, "Node2 and Node3 should have different addresses");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ Peer ID —Ä–∞–∑–Ω—ã–µ
    assert_ne!(node1.peer_id, node2.peer_id, "Nodes should have different Peer IDs");
    assert_ne!(node1.peer_id, node3.peer_id, "Nodes should have different Peer IDs");
    assert_ne!(node2.peer_id, node3.peer_id, "Nodes should have different Peer IDs");
    
    println!("‚úÖ Multiple nodes startup test passed - all 3 nodes started successfully");
}

/// –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#[tokio::test]
async fn test_node_startup_network_state() {
    let mut node = TestNode::new().await.expect("Failed to create test node");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
    // –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É–∑–µ–ª —Å–æ–∑–¥–∞–Ω –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start listening");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    assert!(listen_addr.to_string().starts_with("/ip4/127.0.0.1/tcp/"),
            "Listening address should be valid TCP address");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    assert!(!node.peer_id.to_string().is_empty(), "Node should have valid Peer ID");
    
    println!("‚úÖ Node startup network state test passed - node started with address: {}", listen_addr);
}

/// –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞
#[tokio::test]
async fn test_ephemeral_node_startup() {
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let (_handle, mut commander, mut events, peer_id) = TestNode::new_and_spawn().await
        .expect("Failed to create and spawn ephemeral node");
    
    // –°–æ–∑–¥–∞–µ–º TestNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ NodeExt
    let mut node = TestNode {
        node: NetworkNode::new_with_config(
            identity::Keypair::generate_ed25519(),
            create_test_por(),
            Some(XRoutesConfig::client()),
        ).await.expect("Failed to create node").0,
        commander,
        events,
        peer_id,
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    let listen_addr = node.listen_with_test_config().await
        .expect("Failed to start ephemeral node listening");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —É–∑–ª–∞
    assert!(!listen_addr.to_string().is_empty(), "Ephemeral node should have valid listening address");
    assert!(!node.peer_id.to_string().is_empty(), "Ephemeral node should have valid Peer ID");
    
    println!("‚úÖ Ephemeral node startup test passed - ephemeral node started successfully");
}
