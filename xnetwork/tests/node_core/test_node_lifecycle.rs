// tests/node_core/test_node_lifecycle.rs - –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –Ω–æ–¥—ã (PRIORITY 1)

use std::time::Duration;
use xnetwork::{XRoutesConfig, events::NetworkEvent};

use crate::common::*;

#[tokio::test]
async fn test_node_creation_and_startup() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing node creation and startup");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—É —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        let (mut node, commander, mut events, peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("Failed to create test node");
        
        println!("Created node with peer ID: {}", peer_id);
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert!(!peer_id.to_string().is_empty(), "Peer ID should not be empty");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–¥–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        let network_state = commander.get_network_state().await;
        println!("Network state: {:?}", network_state);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–¥–∞ –º–æ–∂–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
        let event_received = tokio::time::timeout(Duration::from_secs(2), async {
            events.recv().await.is_some()
        }).await.unwrap_or(false);
        
        println!("Node can receive events: {}", event_received);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        let listen_result = commander.listen_port(Some("127.0.0.1".to_string()), 0).await;
        println!("Listen result: {:?}", listen_result);
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        let listening_event = tokio::time::timeout(Duration::from_secs(3), async {
            while let Some(event) = events.recv().await {
                if let NetworkEvent::ListeningOnAddress { .. } = event {
                    return Some(event);
                }
            }
            None
        }).await.unwrap_or(None);
        
        println!("Listening event received: {}", listening_event.is_some());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
        tokio::time::sleep(Duration::from_secs(1)).await;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        // let stop_result = commander.stop_listening().await;
        // println!("Stop listening result: {:?}", stop_result);
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Node creation and startup test completed"),
        Err(_) => panic!("‚è∞ Node creation and startup test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_node_diagnostics() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing node diagnostics");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (mut node, commander, _events, peer_id) = 
            create_test_node_with_config(XRoutesConfig::client()).await
            .expect("Failed to create test node");
        
        let node_handle = tokio::spawn(async move {
            node.run_with_cleanup_interval(Duration::from_secs(1)).await;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        // let diagnostics = commander.get_diagnostics().await;
        // println!("Diagnostics: {:?}", diagnostics);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        // if let Ok(diag) = diagnostics {
        //     assert!(!diag.peer_id.to_string().is_empty(), "Diagnostics should contain peer ID");
        //     assert_eq!(diag.peer_id, peer_id, "Diagnostics peer ID should match node peer ID");
            
        //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—É–º–Ω—ã
        //     println!("Connections: {}", diag.connections);
        //     println!("Active streams: {}", diag.active_streams);
        //     println!("Uptime: {}s", diag.uptime_seconds);
            
        //     assert!(diag.uptime_seconds >= 0, "Uptime should be non-negative");
        //     assert!(diag.connections >= 0, "Connections count should be non-negative");
        //     assert!(diag.active_streams >= 0, "Active streams count should be non-negative");
        // }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let network_state = commander.get_network_state().await;
        println!("Network state: {:?}", network_state);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—É–º–Ω–æ
        if let Ok(state) = network_state {
            assert!(state.total_connections >= 0, "Total connections should be non-negative");
            // assert!(state.active_connections >= 0, "Active connections should be non-negative");
            // assert!(state.total_connections >= state.active_connections, 
            //        "Total connections should be >= active connections");
        }
        
        // Cleanup
        node_handle.abort();
        tokio::time::sleep(Duration::from_millis(200)).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Node diagnostics test completed"),
        Err(_) => panic!("‚è∞ Node diagnostics test timed out ({}s)", test_timeout.as_secs()),
    }
}
