//! –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–æ–¥—ã NetCom
//! 
//! –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –Ω–æ–¥—ã –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:
//! - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã
//! - –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
//! - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
//! - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
//! 
//! PRIORITY 1: CORE - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

use std::time::Duration;

use crate::utils::node::create_node;
use crate::utils::event_handlers::create_listening_address_handler;

#[tokio::test]
async fn test_node_lifecycle_basic() {
    println!("üß™ Testing basic node lifecycle");
    
    let test_timeout = Duration::from_secs(10);
    
    let result = tokio::time::timeout(test_timeout, async {
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ–∑–¥–∞–µ–º –Ω–æ–¥—É
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—É...");
        let (commander, mut events, handle, peer_id) = 
            create_node().await.expect("Failed to create node");
        
        println!("‚úÖ –ù–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {:?}", peer_id);
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...");
        let (listening_rx, mut listening_handler) = 
            create_listening_address_handler();
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π...");
        let events_task = tokio::spawn(async move {
            while let Some(event) = events.recv().await {
                println!("üì° NODE EVENT: {:?}", event);
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                listening_handler(&event);
            }
        });
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ø–æ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞...");
        commander.listen_port(Some("127.0.0.1".to_string()), 0).await
            .expect("Failed to start listening");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...");
        let listening_addr = tokio::time::timeout(Duration::from_secs(5), listening_rx).await
            .expect("Node should start listening within timeout")
            .expect("Failed to get listening address");
        
        println!("‚úÖ –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –∞–¥—Ä–µ—Å–µ: {}", listening_addr);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å
        println!("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å...");
        let network_state = commander.get_network_state().await
            .expect("Failed to get network state");
        
        println!("üìä –°–ï–¢–ï–í–û–ô –°–¢–ê–¢–£–°:");
        println!("   Local Peer ID: {:?}", network_state.local_peer_id);
        println!("   Listening addresses: {:?}", network_state.listening_addresses);
        println!("   Total connections: {:?}", network_state.total_connections);
        println!("   Authenticated peers: {:?}", network_state.authenticated_peers);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç
        assert!(!network_state.listening_addresses.is_empty(), 
                "Node should have listening addresses");
        assert!(network_state.listening_addresses.contains(&listening_addr),
                "Listening address should be in network state");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–¥–∞ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Peer ID
        assert_eq!(network_state.local_peer_id, peer_id, 
                   "Network state should have correct peer ID");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        println!("üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã...");
        commander.shutdown().await.expect("Failed to shutdown node");
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        let _ = tokio::join!(handle, events_task);
        
        println!("‚úÖ Node lifecycle test completed!");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(Ok(())) => println!("‚úÖ Node lifecycle test completed successfully"),
        Ok(Err(e)) => panic!("‚ùå Node lifecycle test failed: {}", e),
        Err(_) => panic!("‚è∞ Node lifecycle test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_node_lifecycle_multiple_restarts() {
    println!("üß™ Testing node lifecycle with multiple restarts");
    
    let test_timeout = Duration::from_secs(15);
    
    let result = tokio::time::timeout(test_timeout, async {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for i in 0..3 {
            println!("üîÑ –¶–∏–∫–ª {}: —Å–æ–∑–¥–∞–µ–º –Ω–æ–¥—É...", i + 1);
            let (commander, mut events, handle, peer_id) = 
                create_node().await.expect("Failed to create node");
            
            println!("‚úÖ –¶–∏–∫–ª {}: –Ω–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {:?}", i + 1, peer_id);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            let (listening_rx, mut listening_handler) = 
                create_listening_address_handler();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
            let events_task = tokio::spawn(async move {
                while let Some(event) = events.recv().await {
                    println!("üì° CYCLE {} EVENT: {:?}", i + 1, event);
                    listening_handler(&event);
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            commander.listen_port(Some("127.0.0.1".to_string()), 0).await
                .expect("Failed to start listening");
            
            // –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            let listening_addr = tokio::time::timeout(Duration::from_secs(5), listening_rx).await
                .expect("Node should start listening within timeout")
                .expect("Failed to get listening address");
            
            println!("‚úÖ –¶–∏–∫–ª {}: –Ω–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ {}", i + 1, listening_addr);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            let network_state = commander.get_network_state().await
                .expect("Failed to get network state");
            
            assert!(!network_state.listening_addresses.is_empty(), 
                    "Node should have listening addresses in cycle {}", i + 1);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            commander.shutdown().await.expect("Failed to shutdown node");
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            let _ = tokio::join!(handle, events_task);
            
            println!("‚úÖ –¶–∏–∫–ª {} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", i + 1);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            tokio::time::sleep(Duration::from_millis(100)).await;
        }
        
        println!("‚úÖ Multiple restarts test completed!");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(Ok(())) => println!("‚úÖ Multiple restarts test completed successfully"),
        Ok(Err(e)) => panic!("‚ùå Multiple restarts test failed: {}", e),
        Err(_) => panic!("‚è∞ Multiple restarts test timed out ({}s)", test_timeout.as_secs()),
    }
}
