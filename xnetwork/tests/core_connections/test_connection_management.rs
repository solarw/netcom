// tests/core_connections/test_connection_management.rs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ (PRIORITY 2)

use std::time::Duration;
use libp2p::PeerId;
use xnetwork::XRoutesConfig;

use crate::common::*;

#[tokio::test]
async fn test_disconnect_peer() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing peer disconnection");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let connections_before = client_commander.get_all_connections().await.unwrap();
        println!("Connections before disconnect: {}", connections_before.len());
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç peer'–∞
        let disconnect_result = client_commander.disconnect(server_peer_id).await;
        println!("Disconnect result: {:?}", disconnect_result);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        tokio::time::sleep(Duration::from_millis(1000)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let active_connections = connections_after.iter().filter(|c| c.is_active()).count();
        
        println!("Active connections after disconnect: {}", active_connections);
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Peer disconnection test completed"),
        Err(_) => panic!("‚è∞ Peer disconnection test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_disconnect_specific_connection() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing specific connection disconnection");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             _server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let connections = client_commander.get_all_connections().await.unwrap();
        
        if !connections.is_empty() {
            let connection_id = connections[0].connection_id;
            println!("Disconnecting connection: {:?}", connection_id);
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            let disconnect_result = client_commander.disconnect_connection(connection_id).await;
            println!("Disconnect connection result: {:?}", disconnect_result);
            
            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tokio::time::sleep(Duration::from_millis(1000)).await;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            let updated_connections = client_commander.get_all_connections().await.unwrap();
            let still_active = updated_connections.iter()
                .any(|c| c.connection_id == connection_id && c.is_active());
            
            println!("Connection still active: {}", still_active);
        } else {
            println!("‚ö†Ô∏è  No connections available for testing");
        }
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Specific connection disconnection test completed"),
        Err(_) => panic!("‚è∞ Specific connection disconnection test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_disconnect_all_connections() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing disconnect all connections");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             _server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let connections_before = client_commander.get_all_connections().await.unwrap();
        let active_before = connections_before.iter().filter(|c| c.is_active()).count();
        println!("Active connections before disconnect all: {}", active_before);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        let disconnect_all_result = client_commander.disconnect_all().await;
        println!("Disconnect all result: {:?}", disconnect_all_result);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tokio::time::sleep(Duration::from_secs(1)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let active_after = connections_after.iter().filter(|c| c.is_active()).count();
        println!("Active connections after disconnect all: {}", active_after);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let network_state = client_commander.get_network_state().await.unwrap();
        println!("Network state after disconnect all: {} connections", network_state.total_connections);
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Disconnect all connections test completed"),
        Err(_) => panic!("‚è∞ Disconnect all connections test timed out ({}s)", test_timeout.as_secs()),
    }
}
