// tests/xauth/test_auth_events.rs - –°–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (PRIORITY 3)

use std::time::Duration;
use xnetwork::XRoutesConfig;

use crate::common::*;

#[tokio::test]
async fn test_auth_success_events() {
    let test_timeout = Duration::from_secs(20);
    
    println!("üß™ Testing authentication success events");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let connections = client_commander.get_all_connections().await.unwrap();
        println!("Found {} connections", connections.len());
        
        // XAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        tokio::time::sleep(Duration::from_millis(1000)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let still_active = connections_after.iter().filter(|c| c.is_active()).count();
        
        println!("Active connections after auth: {}", still_active);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º—ã –±—ã –ø–æ–ª—É—á–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ PorAuthEvent
        // –ù–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Authentication success events test completed"),
        Err(_) => panic!("‚è∞ Authentication success events test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_auth_connection_stability() {
    let test_timeout = Duration::from_secs(15);
    
    println!("üß™ Testing authentication connection stability");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let initial_connections = client_commander.get_all_connections().await.unwrap();
        let initial_active = initial_connections.iter().filter(|c| c.is_active()).count();
        println!("Initial active connections: {}", initial_active);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
        let stable_connections = client_commander.get_all_connections().await.unwrap();
        let stable_active = stable_connections.iter().filter(|c| c.is_active()).count();
        println!("Stable active connections: {}", stable_active);
        
        // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // –µ—Å–ª–∏ XAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –ø–∞–Ω–∏–∫–∏.
        println!("‚úÖ Authentication connection stability test completed (connections may close if XAuth not configured)");
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Authentication connection stability test completed"),
        Err(_) => panic!("‚è∞ Authentication connection stability test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_multiple_auth_connections() {
    let test_timeout = Duration::from_secs(20);
    
    println!("üß™ Testing multiple authentication connections");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –Ω–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let (_server_handle1, _client_handle1, _server_commander1, client_commander1, 
             server_peer_id1, _client_peer_id1, _server_addr1) = 
            create_connected_pair().await.unwrap();
        
        let (_server_handle2, _client_handle2, _server_commander2, client_commander2, 
             server_peer_id2, _client_peer_id2, _server_addr2) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        let connections1 = client_commander1.get_all_connections().await.unwrap();
        let connections2 = client_commander2.get_all_connections().await.unwrap();
        
        let active1 = connections1.iter().filter(|c| c.is_active()).count();
        let active2 = connections2.iter().filter(|c| c.is_active()).count();
        
        println!("Active connections in first pair: {}", active1);
        println!("Active connections in second pair: {}", active2);
        
        // –û–±–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        assert!(active1 > 0, "First connection should be active");
        assert!(active2 > 0, "Second connection should be active");
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander1.disconnect(server_peer_id1).await;
        let _ = client_commander2.disconnect(server_peer_id2).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Multiple authentication connections test completed"),
        Err(_) => panic!("‚è∞ Multiple authentication connections test timed out ({}s)", test_timeout.as_secs()),
    }
}
