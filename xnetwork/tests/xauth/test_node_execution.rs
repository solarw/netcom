// tests/xauth/test_node_execution.rs - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–¥—ã

use std::time::Duration;
use xnetwork::XRoutesConfig;

use crate::test_utils::{TestNode, NodeExt};

#[tokio::test]
async fn test_node_execution_loop() {
    let test_timeout = Duration::from_secs(30);
    
    println!("üß™ Testing node execution loop");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –Ω–æ–¥, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ spawn
        let mut server_node = TestNode::new_ephemeral().await.unwrap();
        let mut client_node = TestNode::new_ephemeral().await.unwrap();
        
        let server_commander = server_node.commander;
        let client_commander = client_node.commander;
        let mut server_events = server_node.events;
        let mut client_events = client_node.events;
        let server_peer_id = server_node.peer_id;
        let client_peer_id = client_node.peer_id;
        
        println!("‚úÖ Nodes created (not spawned yet)");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        let server_handle = tokio::spawn(async move {
            println!("üîÑ Starting server node execution loop");
            server_node.node.run().await;
            println!("üõë Server node execution loop stopped");
        });
        
        let client_handle = tokio::spawn(async move {
            println!("üîÑ Starting client node execution loop");
            client_node.node.run().await;
            println!("üõë Client node execution loop stopped");
        });
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        println!("üéØ Starting server listening...");
        server_commander.listen_port(None, 0).await.unwrap();
        
        // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        println!("‚è≥ Waiting for server listening address...");
        let mut server_addr = None;
        for _ in 0..20 {
            let server_addrs = server_commander.get_listen_addresses().await.unwrap();
            if let Some(addr) = server_addrs.first() {
                server_addr = Some(addr.clone());
                break;
            }
            tokio::time::sleep(Duration::from_millis(100)).await;
        }
        
        let server_addr = server_addr.expect("Failed to get server listening address");
        println!("üéØ Server listening on: {}", server_addr);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫ —Å–µ—Ä–≤–µ—Ä—É
        println!("üéØ Connecting client to server...");
        client_commander.connect(server_addr).await.unwrap();
        
        // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        println!("‚è≥ Waiting for connection events...");
        
        let mut server_connection_events = 0;
        let mut client_connection_events = 0;
        
        // –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        for _ in 0..50 {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞
            match server_events.try_recv() {
                Ok(event) => {
                    println!("üì° Server event: {:?}", event);
                    if matches!(event, xnetwork::NetworkEvent::ConnectionOpened { .. }) {
                        server_connection_events += 1;
                    }
                }
                Err(_) => {
                    // –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–Ω–∞–ª–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            match client_events.try_recv() {
                Ok(event) => {
                    println!("üì° Client event: {:?}", event);
                    if matches!(event, xnetwork::NetworkEvent::ConnectionOpened { .. }) {
                        client_connection_events += 1;
                    }
                }
                Err(_) => {
                    // –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–Ω–∞–ª–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                }
            }
            
            if server_connection_events > 0 && client_connection_events > 0 {
                break;
            }
            
            tokio::time::sleep(Duration::from_millis(100)).await;
        }
        
        println!("üìä Server connection events: {}", server_connection_events);
        println!("üìä Client connection events: {}", client_connection_events);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let server_connections = server_commander.get_all_connections().await.unwrap();
        let client_connections = client_commander.get_all_connections().await.unwrap();
        
        println!("üìä Server connections: {}", server_connections.len());
        println!("üìä Client connections: {}", client_connections.len());
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let events_received = server_connection_events > 0 && client_connection_events > 0;
        let connections_tracked = !server_connections.is_empty() && !client_connections.is_empty();
        
        println!("üîç Execution analysis:");
        println!("   Connection events received: {}", events_received);
        println!("   Connections tracked: {}", connections_tracked);
        
        if events_received && !connections_tracked {
            println!("‚ùå PROBLEM: Events received but connections not tracked!");
            println!("   This means handle_swarm_event is called but add_connection is not working");
        } else if !events_received && !connections_tracked {
            println!("‚ùå PROBLEM: No events received!");
            println!("   This means the execution loop is not processing Swarm events");
        } else if events_received && connections_tracked {
            println!("‚úÖ Everything works correctly!");
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—ã
        println!("üõë Shutting down nodes...");
        server_commander.shutdown().await.unwrap();
        client_commander.shutdown().await.unwrap();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ—Å–ª–µ shutdown)
        server_handle.abort();
        client_handle.abort();
        
        println!("‚úÖ Node execution loop test completed");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Node execution loop test completed"),
        Err(_) => panic!("‚è∞ Node execution loop test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_swarm_event_processing() {
    let test_timeout = Duration::from_secs(30);
    
    println!("üß™ Testing Swarm event processing");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        let mut node = TestNode::new_ephemeral().await.unwrap();
        let commander = node.commander;
        let mut events = node.events;
        let _peer_id = node.peer_id;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        let node_handle = tokio::spawn(async move {
            println!("üîÑ Starting node execution loop");
            node.node.run().await;
            println!("üõë Node execution loop stopped");
        });
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        commander.listen_port(None, 0).await.unwrap();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
        let addrs = commander.get_listen_addresses().await.unwrap();
        println!("üéØ Node listening on: {:?}", addrs);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        let mut listening_event_received = false;
        
        for _ in 0..20 {
            match events.try_recv() {
                Ok(event) => {
                    println!("üì° Event received: {:?}", event);
                    if matches!(event, xnetwork::NetworkEvent::ListeningOnAddress { .. }) {
                        listening_event_received = true;
                        break;
                    }
                }
                Err(_) => {
                    // –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–Ω–∞–ª–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                }
            }
            tokio::time::sleep(Duration::from_millis(50)).await;
        }
        
        println!("üìä Listening event received: {}", listening_event_received);
        
        if listening_event_received {
            println!("‚úÖ Swarm events are being processed correctly");
        } else {
            println!("‚ùå PROBLEM: No Swarm events received!");
            println!("   This means the execution loop is not working properly");
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É
        commander.shutdown().await.unwrap();
        tokio::time::sleep(Duration::from_millis(500)).await;
        node_handle.abort();
        
        println!("‚úÖ Swarm event processing test completed");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Swarm event processing test completed"),
        Err(_) => panic!("‚è∞ Swarm event processing test timed out ({}s)", test_timeout.as_secs()),
    }
}
