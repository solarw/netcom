// tests/xauth/test_auth_on_connection.rs - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (PRIORITY 3)

use std::time::Duration;
use xnetwork::XRoutesConfig;

use crate::common::*;

#[tokio::test]
async fn test_auth_on_connection() {
    let test_timeout = Duration::from_secs(15);
    
    println!("üß™ Testing authentication on connection establishment");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –Ω–æ–¥ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let connections = client_commander.get_all_connections().await.unwrap();
        println!("Found {} connections after authentication", connections.len());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        let active_connections = connections.iter().filter(|c| c.is_active()).count();
        println!("Active connections: {}", active_connections);
        
        // XAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let connections_after_auth = client_commander.get_all_connections().await.unwrap();
        let active_after_auth = connections_after_auth.iter().filter(|c| c.is_active()).count();
        println!("Active connections after auth: {}", active_after_auth);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Authentication on connection test completed"),
        Err(_) => panic!("‚è∞ Authentication on connection test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_auth_success() {
    let test_timeout = Duration::from_secs(15);
    
    println!("üß™ Testing successful authentication");
    
    let result = tokio::time::timeout(test_timeout, async {
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ
        let connections = client_commander.get_all_connections().await.unwrap();
        let active_connections = connections.iter().filter(|c| c.is_active()).count();
        
        println!("Active authenticated connections: {}", active_connections);
        
        // XAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        tokio::time::sleep(Duration::from_millis(500)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let connections_after = client_commander.get_all_connections().await.unwrap();
        let still_active = connections_after.iter().filter(|c| c.is_active()).count();
        assert!(still_active > 0, "Connection should remain active after successful authentication");
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Successful authentication test completed"),
        Err(_) => panic!("‚è∞ Successful authentication test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_auth_basic_functionality() {
    let test_timeout = Duration::from_secs(10);
    
    println!("üß™ Testing basic authentication functionality");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–¥—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        let connections = client_commander.get_all_connections().await.unwrap();
        assert!(!connections.is_empty(), "Should have at least one connection");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        let active_connections = connections.iter().filter(|c| c.is_active()).count();
        assert!(active_connections > 0, "Should have active connections");
        
        println!("‚úÖ Basic authentication functionality test completed");
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Basic authentication functionality test completed"),
        Err(_) => panic!("‚è∞ Basic authentication functionality test timed out ({}s)", test_timeout.as_secs()),
    }
}
