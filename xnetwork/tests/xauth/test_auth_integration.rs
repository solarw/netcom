//! –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è XAuth –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ XNetwork
//! 
//! –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NetCom –Ω–æ–¥:
//! 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥
//! 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π  
//! 3. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
//! 4. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
//! 5. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
//! 6. –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
//! 7. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

use std::time::Duration;

use crate::utils::node::create_node;
use crate::utils::event_handlers::{
    create_peer_connected_handler, 
    create_mutual_auth_handler,
    create_handler_submit_por_verification,
    create_listening_address_handler
};

#[tokio::test]
async fn test_auth_integration_basic() {
    println!("üß™ Testing basic XAuth integration in XNetwork");
    
    let test_timeout = Duration::from_secs(15);
    
    let result = tokio::time::timeout(test_timeout, async {
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–¥—ã
        println!("üîÑ –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –Ω–æ–¥—É...");
        let (server_commander, mut server_events, server_handle, server_peer_id) = 
            create_node().await.expect("Failed to create server node");
        
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –Ω–æ–¥—É...");
        let (client_commander, mut client_events, client_handle, client_peer_id) = 
            create_node().await.expect("Failed to create client node");
        
        println!("‚úÖ –ù–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã:");
        println!("   –°–µ—Ä–≤–µ—Ä: {:?}", server_peer_id);
        println!("   –ö–ª–∏–µ–Ω—Ç: {:?}", client_peer_id);
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...");
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        let (server_listening_rx, mut server_listening_handler) = 
            create_listening_address_handler();
        let (server_connected_rx, mut server_connected_handler) = 
            create_peer_connected_handler(client_peer_id);
        let (server_auth_success_rx, mut server_auth_success_handler) = 
            create_mutual_auth_handler(client_peer_id);
        let mut server_por_approve_handler = 
            create_handler_submit_por_verification(server_commander.clone());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        let (client_connected_rx, mut client_connected_handler) = 
            create_peer_connected_handler(server_peer_id);
        let (client_auth_success_rx, mut client_auth_success_handler) = 
            create_mutual_auth_handler(server_peer_id);
        let mut client_por_approve_handler = 
            create_handler_submit_por_verification(client_commander.clone());
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞...");
        let server_events_task = tokio::spawn(async move {
            while let Some(event) = server_events.recv().await {
                println!("üì° SERVER EVENT: {:?}", event);
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                server_listening_handler(&event);
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                server_connected_handler(&event);
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
                server_auth_success_handler(&event);
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ por request, –∏ –≤—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ—Ç
                server_por_approve_handler(&event);
            }
        });
        
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞...");
        let client_events_task = tokio::spawn(async move {
            while let Some(event) = client_events.recv().await {
                println!("üì° CLIENT EVENT: {:?}", event);
                client_connected_handler(&event);
                client_auth_success_handler(&event);
                client_por_approve_handler(&event);
            }
        });
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ø–æ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
        // –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å
        println!("üîÑ –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...");
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await
            .expect("Failed to start server listening");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...");
        let server_listening = tokio::time::timeout(Duration::from_secs(10), server_listening_rx).await
            .expect("Server should start listening within timeout")
            .expect("Failed to get listening address");
        
        println!("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å–µ: {}", server_listening);
        
        let server_addr = server_listening;
        
        // –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        println!("üîÑ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        client_commander.connect(server_addr).await
            .expect("Failed to connect client to server");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ–ª–µ —Ç–µ—Å—Ç–∞
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        let client_connected = tokio::time::timeout(Duration::from_secs(10), client_connected_rx).await;
        let server_connected = tokio::time::timeout(Duration::from_secs(10), server_connected_rx).await;
        
        assert!(client_connected.is_ok(), "Client should connect to server");
        assert!(server_connected.is_ok(), "Server should see client connection");
        
        println!("‚úÖ –û–±–∞ —É–∑–ª–∞ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
        let client_auth_success = tokio::time::timeout(Duration::from_secs(10), client_auth_success_rx).await;
        let server_auth_success = tokio::time::timeout(Duration::from_secs(10), server_auth_success_rx).await;
        
        assert!(client_auth_success.is_ok(), "Client should complete authentication with server");
        assert!(server_auth_success.is_ok(), "Server should complete authentication with client");
        
        println!("‚úÖ –û–±–∞ —É–∑–ª–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∑–∞–∏–º–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let is_client_authenticated = client_commander
            .is_peer_authenticated(server_peer_id).await
            .expect("Failed to check client authentication");
        
        let is_server_authenticated = server_commander
            .is_peer_authenticated(client_peer_id).await
            .expect("Failed to check server authentication");
        
        println!("üîê –°–¢–ê–¢–£–° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:");
        println!("   Client ‚Üí Server: {}", is_client_authenticated);
        println!("   Server ‚Üí Client: {}", is_server_authenticated);
        
        assert!(is_client_authenticated, "Client should be authenticated to server");
        assert!(is_server_authenticated, "Server should be authenticated to client");
        
        // –û—á–∏—Å—Ç–∫–∞
        println!("üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–¥...");
        client_commander.shutdown().await.expect("Failed to shutdown client");
        server_commander.shutdown().await.expect("Failed to shutdown server");
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        let _ = tokio::join!(server_handle, client_handle, server_events_task, client_events_task);
        
        println!("‚úÖ XAuth integration test completed!");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(Ok(())) => println!("‚úÖ XAuth integration test completed successfully"),
        Ok(Err(e)) => panic!("‚ùå XAuth integration test failed: {}", e),
        Err(_) => panic!("‚è∞ XAuth integration test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_auth_integration_multiple_connections() {
    println!("üß™ Testing XAuth integration with multiple connections");
    
    let test_timeout = Duration::from_secs(30);
    
    let result = tokio::time::timeout(test_timeout, async {
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–¥—ã
        println!("üîÑ –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –Ω–æ–¥—É...");
        let (server_commander, mut server_events, server_handle, server_peer_id) = 
            create_node().await.expect("Failed to create server node");
        
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –Ω–æ–¥—É 1...");
        let (client1_commander, mut client1_events, client1_handle, client1_peer_id) = 
            create_node().await.expect("Failed to create client1 node");
        
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –Ω–æ–¥—É 2...");
        let (client2_commander, mut client2_events, client2_handle, client2_peer_id) = 
            create_node().await.expect("Failed to create client2 node");
        
        println!("‚úÖ –ù–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã:");
        println!("   –°–µ—Ä–≤–µ—Ä: {:?}", server_peer_id);
        println!("   –ö–ª–∏–µ–Ω—Ç 1: {:?}", client1_peer_id);
        println!("   –ö–ª–∏–µ–Ω—Ç 2: {:?}", client2_peer_id);
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –Ω–æ–¥
        println!("üîÑ –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...");
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        let (server_listening_rx, mut server_listening_handler) = 
            create_listening_address_handler();
        let (server_client1_connected_rx, mut server_client1_connected_handler) = 
            create_peer_connected_handler(client1_peer_id);
        let (server_client2_connected_rx, mut server_client2_connected_handler) = 
            create_peer_connected_handler(client2_peer_id);
        let (server_client1_auth_rx, mut server_client1_auth_handler) = 
            create_mutual_auth_handler(client1_peer_id);
        let (server_client2_auth_rx, mut server_client2_auth_handler) = 
            create_mutual_auth_handler(client2_peer_id);
        let mut server_por_approve_handler = 
            create_handler_submit_por_verification(server_commander.clone());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 1
        let (client1_connected_rx, mut client1_connected_handler) = 
            create_peer_connected_handler(server_peer_id);
        let (client1_auth_rx, mut client1_auth_handler) = 
            create_mutual_auth_handler(server_peer_id);
        let mut client1_por_approve_handler = 
            create_handler_submit_por_verification(client1_commander.clone());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 2
        let (client2_connected_rx, mut client2_connected_handler) = 
            create_peer_connected_handler(server_peer_id);
        let (client2_auth_rx, mut client2_auth_handler) = 
            create_mutual_auth_handler(server_peer_id);
        let mut client2_por_approve_handler = 
            create_handler_submit_por_verification(client2_commander.clone());
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞...");
        let server_events_task = tokio::spawn(async move {
            while let Some(event) = server_events.recv().await {
                println!("üì° SERVER EVENT: {:?}", event);
                server_listening_handler(&event);
                server_client1_connected_handler(&event);
                server_client2_connected_handler(&event);
                server_client1_auth_handler(&event);
                server_client2_auth_handler(&event);
                server_por_approve_handler(&event);
            }
        });
        
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞ 1...");
        let client1_events_task = tokio::spawn(async move {
            while let Some(event) = client1_events.recv().await {
                println!("üì° CLIENT1 EVENT: {:?}", event);
                client1_connected_handler(&event);
                client1_auth_handler(&event);
                client1_por_approve_handler(&event);
            }
        });
        
        println!("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞ 2...");
        let client2_events_task = tokio::spawn(async move {
            while let Some(event) = client2_events.recv().await {
                println!("üì° CLIENT2 EVENT: {:?}", event);
                client2_connected_handler(&event);
                client2_auth_handler(&event);
                client2_por_approve_handler(&event);
            }
        });
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ø–æ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
        // –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å
        println!("üîÑ –°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...");
        server_commander.listen_port(Some("127.0.0.1".to_string()), 0).await
            .expect("Failed to start server listening");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...");
        let server_listening = tokio::time::timeout(Duration::from_secs(10), server_listening_rx).await
            .expect("Server should start listening within timeout")
            .expect("Failed to get listening address");
        
        println!("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å–µ: {}", server_listening);
        
        let server_addr = server_listening;
        
        // –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        println!("üîÑ –ö–ª–∏–µ–Ω—Ç 1 –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        client1_commander.connect(server_addr.clone()).await
            .expect("Failed to connect client1 to server");
        
        println!("üîÑ –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        client2_commander.connect(server_addr).await
            .expect("Failed to connect client2 to server");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        let client1_connected = tokio::time::timeout(Duration::from_secs(10), client1_connected_rx).await;
        let client2_connected = tokio::time::timeout(Duration::from_secs(10), client2_connected_rx).await;
        let server_client1_connected = tokio::time::timeout(Duration::from_secs(10), server_client1_connected_rx).await;
        let server_client2_connected = tokio::time::timeout(Duration::from_secs(10), server_client2_connected_rx).await;
        
        assert!(client1_connected.is_ok(), "Client1 should connect to server");
        assert!(client2_connected.is_ok(), "Client2 should connect to server");
        assert!(server_client1_connected.is_ok(), "Server should see client1 connection");
        assert!(server_client2_connected.is_ok(), "Server should see client2 connection");
        
        println!("‚úÖ –í—Å–µ —É–∑–ª—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        println!("‚è≥ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
        let client1_auth_success = tokio::time::timeout(Duration::from_secs(10), client1_auth_rx).await;
        let client2_auth_success = tokio::time::timeout(Duration::from_secs(10), client2_auth_rx).await;
        let server_client1_auth_success = tokio::time::timeout(Duration::from_secs(10), server_client1_auth_rx).await;
        let server_client2_auth_success = tokio::time::timeout(Duration::from_secs(10), server_client2_auth_rx).await;
        
        assert!(client1_auth_success.is_ok(), "Client1 should complete authentication with server");
        assert!(client2_auth_success.is_ok(), "Client2 should complete authentication with server");
        assert!(server_client1_auth_success.is_ok(), "Server should complete authentication with client1");
        assert!(server_client2_auth_success.is_ok(), "Server should complete authentication with client2");
        
        println!("‚úÖ –í—Å–µ —É–∑–ª—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∑–∞–∏–º–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let is_client1_authenticated = client1_commander
            .is_peer_authenticated(server_peer_id).await
            .expect("Failed to check client1 authentication");
        
        let is_client2_authenticated = client2_commander
            .is_peer_authenticated(server_peer_id).await
            .expect("Failed to check client2 authentication");
        
        let is_server_client1_authenticated = server_commander
            .is_peer_authenticated(client1_peer_id).await
            .expect("Failed to check server authentication for client1");
        
        let is_server_client2_authenticated = server_commander
            .is_peer_authenticated(client2_peer_id).await
            .expect("Failed to check server authentication for client2");
        
        println!("üîê –°–¢–ê–¢–£–° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:");
        println!("   Client1 ‚Üí Server: {}", is_client1_authenticated);
        println!("   Client2 ‚Üí Server: {}", is_client2_authenticated);
        println!("   Server ‚Üí Client1: {}", is_server_client1_authenticated);
        println!("   Server ‚Üí Client2: {}", is_server_client2_authenticated);
        
        assert!(is_client1_authenticated, "Client1 should be authenticated to server");
        assert!(is_client2_authenticated, "Client2 should be authenticated to server");
        assert!(is_server_client1_authenticated, "Server should be authenticated to client1");
        assert!(is_server_client2_authenticated, "Server should be authenticated to client2");
        
        // –û—á–∏—Å—Ç–∫–∞
        println!("üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–¥...");
        client1_commander.shutdown().await.expect("Failed to shutdown client1");
        client2_commander.shutdown().await.expect("Failed to shutdown client2");
        server_commander.shutdown().await.expect("Failed to shutdown server");
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        let _ = tokio::join!(server_handle, client1_handle, client2_handle, server_events_task, client1_events_task, client2_events_task);
        
        println!("‚úÖ Multiple connections test completed!");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(Ok(())) => println!("‚úÖ Multiple connections test completed successfully"),
        Ok(Err(e)) => panic!("‚ùå Multiple connections test failed: {}", e),
        Err(_) => panic!("‚è∞ Multiple connections test timed out ({}s)", test_timeout.as_secs()),
    }
}
