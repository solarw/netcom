// tests/xauth/test_connection_diagnostics.rs - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏

use std::time::Duration;
use xnetwork::XRoutesConfig;

use crate::common::*;

#[tokio::test]
async fn test_connection_lifecycle_diagnostics() {
    let test_timeout = Duration::from_secs(30);
    
    println!("üß™ Testing connection lifecycle diagnostics");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –Ω–æ–¥ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        let (_server_handle, _client_handle, server_commander, client_commander, 
             server_peer_id, client_peer_id, server_addr) = 
            create_connected_pair().await.unwrap();
        
        println!("‚úÖ Connection established between {} and {}", client_peer_id, server_peer_id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let initial_client_connections = client_commander.get_all_connections().await.unwrap();
        let initial_server_connections = server_commander.get_all_connections().await.unwrap();
        
        println!("üìä Initial client connections: {}", initial_client_connections.len());
        println!("üìä Initial server connections: {}", initial_server_connections.len());
        
        for conn in &initial_client_connections {
            println!("   Client connection: {:?}", conn);
        }
        for conn in &initial_server_connections {
            println!("   Server connection: {:?}", conn);
        }
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        println!("‚è≥ Waiting for authentication to complete...");
        tokio::time::sleep(Duration::from_secs(1)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        let after_auth_client_connections = client_commander.get_all_connections().await.unwrap();
        let after_auth_server_connections = server_commander.get_all_connections().await.unwrap();
        
        println!("üìä Client connections after auth: {}", after_auth_client_connections.len());
        println!("üìä Server connections after auth: {}", after_auth_server_connections.len());
        
        for conn in &after_auth_client_connections {
            println!("   Client connection after auth: {:?}", conn);
        }
        for conn in &after_auth_server_connections {
            println!("   Server connection after auth: {:?}", conn);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
        let client_network_state = client_commander.get_network_state().await.unwrap();
        let server_network_state = server_commander.get_network_state().await.unwrap();
        
        println!("üìä Client network state: total_connections={}, authenticated_peers={}", 
                 client_network_state.total_connections, client_network_state.authenticated_peers);
        println!("üìä Server network state: total_connections={}, authenticated_peers={}", 
                 server_network_state.total_connections, server_network_state.authenticated_peers);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let is_client_authenticated = client_commander.is_peer_authenticated(server_peer_id).await.unwrap();
        let is_server_authenticated = server_commander.is_peer_authenticated(client_peer_id).await.unwrap();
        
        println!("üîê Client authenticated with server: {}", is_client_authenticated);
        println!("üîê Server authenticated with client: {}", is_server_authenticated);
        
        // –ñ–¥–µ–º –µ—â–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        println!("‚è≥ Waiting 5 seconds to check connection stability...");
        tokio::time::sleep(Duration::from_secs(5)).await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let final_client_connections = client_commander.get_all_connections().await.unwrap();
        let final_server_connections = server_commander.get_all_connections().await.unwrap();
        
        println!("üìä Final client connections: {}", final_client_connections.len());
        println!("üìä Final server connections: {}", final_server_connections.len());
        
        for conn in &final_client_connections {
            println!("   Final client connection: {:?}", conn);
        }
        for conn in &final_server_connections {
            println!("   Final server connection: {:?}", conn);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let connections_lost = initial_client_connections.len() > final_client_connections.len();
        
        if connections_lost {
            println!("‚ö†Ô∏è  WARNING: Connections were lost during the test!");
            println!("   Initial: {}, Final: {}", initial_client_connections.len(), final_client_connections.len());
        } else {
            println!("‚úÖ Connection stability: OK");
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        println!("‚úÖ Connection lifecycle diagnostics test completed");
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ Connection lifecycle diagnostics test completed"),
        Err(_) => panic!("‚è∞ Connection lifecycle diagnostics test timed out ({}s)", test_timeout.as_secs()),
    }
}

#[tokio::test]
async fn test_quic_timeout_diagnostics() {
    let test_timeout = Duration::from_secs(60);
    
    println!("üß™ Testing QUIC timeout diagnostics");
    
    let result = tokio::time::timeout(test_timeout, async {
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –Ω–æ–¥
        let (_server_handle, _client_handle, _server_commander, client_commander, 
             server_peer_id, _client_peer_id, _server_addr) = 
            create_connected_pair().await.unwrap();
        
        println!("‚úÖ Connection established");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        for i in 0..15 {
            let connections = client_commander.get_all_connections().await.unwrap();
            let active_connections = connections.iter().filter(|c| c.is_active()).count();
            
            println!("‚è±Ô∏è  Time: {}s, Active connections: {}", i * 2, active_connections);
            
            if active_connections == 0 {
                println!("‚ö†Ô∏è  All connections closed at {}s", i * 2);
                break;
            }
            
            tokio::time::sleep(Duration::from_secs(2)).await;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let final_connections = client_commander.get_all_connections().await.unwrap();
        let final_active = final_connections.iter().filter(|c| c.is_active()).count();
        
        println!("üìä Final active connections: {}", final_active);
        
        if final_active == 0 {
            println!("‚ùå All connections closed due to timeout");
        } else {
            println!("‚úÖ Connections remained active");
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        let _ = client_commander.disconnect(server_peer_id).await;
        
        Result::<(), Box<dyn std::error::Error>>::Ok(())
    }).await;
    
    match result {
        Ok(_) => println!("‚úÖ QUIC timeout diagnostics test completed"),
        Err(_) => panic!("‚è∞ QUIC timeout diagnostics test timed out ({}s)", test_timeout.as_secs()),
    }
}
